{
    "posts": [
        {
            "title": "This Friday i completed my first full month of working as a developer here's what i've learned (might be wrong about all of this, but it's my experience)",
            "body": "0. 90% of the job is knowing what questions to ask/search, you can know all the fundamentals and literally everything thing there is to know(technically speaking) about a technology stack but just like with math, if you don't know what questions to ask you'll never know what formulas to use on each different situation.\n\n1. If you can't test your code/your code doesn't have tests even if it's right and works, it's actually wrong and shit.\n\n\n2. Seniority does mean a lot, but not always... and even if you're just starting out(junior/intern whatever), if you think something is wrong, your colleagues (even the more senior ones) usually really appreciate you bringing it up.\n\n\n3. Don't be afraid to take a task you think it's out of your skill level, worse case scenario (at least in my company) there's always someone really eager to help you out(not do shit for you, but help you figure what you need to be asking/solving).\n\n\n4. Lastly don't feel like just because you learned X technologies you can't work with other things, the time i spent learning python was mostly Django/SQL but I ended up working with Flask/MongoDB(never had used them at the time of the interview) i was just honest about my python skill level and that i thought i was up for the challenge and i've been really performing out of most people's expectations of me(honestly if i could do it with almost no technical background up until earlier this year, y'all have a better chance)\n\n\nGood luck lads :D feel free to leave me some wisdom in the comments as well",
            "ups": 244,
            "downs": 0,
            "subreddit": "learnprogramming"
        },
        {
            "title": "Started The Odin Project, have now discovered it does NOT want me to use Windows... is this a common thing I should be anticipating?",
            "body": "So, I'm a little annoyed to discover that if I want to continue this course, apparently I need to run a VM running Linux of some kind. I've only really done HMTL and CSS in the past, with a little dabbling in Python and Javascript, so I don't know how much of a *thing* this is, but is this something I am just going to have to live with if I want to do any kind of backend web dev stuff?\n\nThe plan was to just use my normal machines, which are all Windows, so ideally I would also be *learning* in a Windows environment. Part of me wants to drop Odin because, ya know, if my intention is to work on Windows, I don't want to learn things that specifically *don't* work there. But if this is just a thing I'm going to always run into, and there's not really much choice in the matter... I guess I'll just deal with it?\n\nDo I stay, or do I go? Create the VM and learn in Linux, even though I'll likely just be using Windows in the future? Find another program to follow, even though this one seemed so promising?! A little guidance would be much appreciated here, thank you :]\n\n**EDIT:** Sweet mother, this got a *lot* more responses than I had anticipated! I am still working my way through it all, but it's kindof a lot to respond to, so I just want to at least add this edit to say, THANK YOU. This was very helpful! I've decided to just stick with it and learn to use Linux utilizing a VM. I like what many responses have said as far as these being valuable skills to learn, so I think whatever environment I end up working in, it will still be helpful to learn. Plus, there definitely seem to be a good number of comments saying Linux is fairly common in the industry, so I think it's better to just jump in and check it out. Though to everyone suggesting WSL, I'm gonna keep an eye on that as well. I want to try some basic-ass Ubuntu first to see what I can see, but I'll keep that in mind as an option.\n\nOkay, now to go through the rest of these comments. Thanks again, everyone! :D",
            "ups": 61,
            "downs": 0,
            "subreddit": "learnprogramming"
        },
        {
            "title": "Today I was proven wrong",
            "body": "A few weeks ago I started a new job as a full stack web developer. I have a few years experience but I\u2019m no expert. I learn something everyday.\nThe new team is hardly acknowledging my existence and I\u2019m doing my best trying to interact with them and even trying to get task assignments.\nEventually I was assigned to solving a bug. While trying to solve the bug i deep dived in the code base. The code looks like a real miracle to me through the fact that it seems to work while I can see big problems at every layer of the application.\nI was so blown away about other issues that I found that I simply couldn\u2019t focus on the bug.\nI told my team that I think that the bug seems to be a symptom of a bigger problem and I\u2019m not even convinced that the data we see in the app is even correct since there is no way of telling except if you are manually comparing the data with the data aggregated from different db tables.\nThere is not a single test in the whole app and there is no types used.\nThey simply ignored what i said and fixed the bug themselves.\nI guess I\u2019m wrong. The application works and I acknowledged and congratulated the fix.\nThe lesson I learned is that I should probably slow down and what seems wrong to me might not be necessarily wrong at all.\nI have no problem at all being wrong but this time it feels different.",
            "ups": 854,
            "downs": 0,
            "subreddit": "learnprogramming"
        }
    ]
}