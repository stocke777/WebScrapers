{
    "comments": [
        {
            "body": "I think you are worrying too much.  If it really bothers you pick a schools curriculum and work through it",
            "ups": 75,
            "downs": 0,
            "subreddit": "learnprogramming"
        },
        {
            "body": "First, stop comparing yourself to others. Plenty of people will do that for you. It is a losing game. You will always find people better than you, and it can paralyze you.\n\nNext, realize that you need to improve yourself every day. This will never go away. Decide what success means for you, and go get it. Determine every day how you can be better and do it. Working on yourself pays out exponentially, not linearly.\n\nFinally, let go of the guilt. Guilt is a social construct and only works if you let it. You have to hold onto that guilt for it to affect you in any meaningful way. Holding onto guilt is just causing stress which only serves to shorten your life. To quote a very old song, \"Don't worry. Be happy\"",
            "ups": 61,
            "downs": 0,
            "subreddit": "learnprogramming"
        },
        {
            "body": "News flash;  CS grads also spend their spare time working on improvement.  It doesn't have to feel like playing catchup, but DO expect to spend some time learning things outside your current work.  It's an ever-evolving craft.",
            "ups": 13,
            "downs": 0,
            "subreddit": "learnprogramming"
        },
        {
            "body": "After ~2 years of experience a CS degree literally means nothing. It\u2019s like saying, I never graduated kindergarten how can I compete with my fellow calculus students.",
            "ups": 38,
            "downs": 0,
            "subreddit": "learnprogramming"
        },
        {
            "body": "This sub is really going crazy over cs-grads being some kind of magical creatures. We also need to self-learn, you can't learn to program without self learning. Degree won't teach you how to program.. you need to do it in your spare time.",
            "ups": 16,
            "downs": 0,
            "subreddit": "learnprogramming"
        },
        {
            "body": "CS majors don't study programming any more than astronomy majors study telescopes. They *especially* don't study professional software development. There's no respect in which you should think they set the baseline.",
            "ups": 3,
            "downs": 0,
            "subreddit": "learnprogramming"
        },
        {
            "body": "Our best programmers are the tinkerers, the people who do it just for doing it.  A lot of the college grads are just there for a paycheck, they shut down on the weekends while others do it for fun.\n\nCareers also go in five year cycles, if some guy is doing the same thing for 15 years, he's probably exhausted his expertise level, unless they put massive hours into the craft, but most just end up doing the bare minimum.  Don't let it get to you.\n\nThat's probably not the case at the high end FAANG levels, but at an average shop, it will be.",
            "ups": 11,
            "downs": 0,
            "subreddit": "learnprogramming"
        },
        {
            "body": "You know : **self learners are the best**. Because they always have the motivation to improve themselves. You don't have to compete them, you have to compete yourself. So my friend, like Elsa said:\n\n                                    LET IT GO",
            "ups": 3,
            "downs": 0,
            "subreddit": "learnprogramming"
        },
        {
            "body": "I'm a CS grad and I'm still studying on my own/doing own projects after work time. It's not because I have to, rather I just like doing it and learning new things. It's like a hobby and I believe that there are plenty ppl like me in industry. But I don't think its majority. I know a lot of CS grads which just went to uni because parents sent them there or just they didn't know what they want to do in their lives.",
            "ups": 1,
            "downs": 0,
            "subreddit": "learnprogramming"
        },
        {
            "body": "I dropped out of art school. I liked computers, though, and really just had fun playing with them and learning how they work.\n\nI taught myself a lot, asked tons of questions, and continuously sought out people who knew more than me. Ten years later, I do pretty much the same thing - except now I\u2019m hiring people who know more than me. I still actively surround myself with individuals who push me to grow, while reinforcing my current knowledge by mentoring the mids and juniors.\n\nOthers have said it, but if you find yourself the most knowledgeable in the room, you\u2019ve hit a dead end, and that should not be your goal. Disparity in knowledge with peers shouldn\u2019t scare you, but an absence of passion should. As long as you make sure the content, languages, frameworks, industries, or colleagues, etc. are enough to fuel your passion, the learning and growth will come in time.\n\nFind someone with whom to pair program and don\u2019t be afraid to ask them \u201cstupid\u201d questions! Having never taken a CS class, starting out I had to ask coworkers to explain a tuple, and what a \u201cGitHub\u201d was. Pairing up on a fun personal project is a great way to enjoy the learning process more. Also, you\u2019ll probably find you get more out of it, with less time investment, than doing it on your own.\n\nIt\u2019ll be ok, just stay curious :)",
            "ups": 1,
            "downs": 0,
            "subreddit": "learnprogramming"
        },
        {
            "body": "Always invest in your personal well being first and take time to enjoy life outside of work. But also realize that if you stagnate and don\u2019t try to push yourself to learn more then it\u2019s not a matter of someone becoming better. You simply will become bored where you are at.\n\nTry and find ways to incorporate learning new things at work. Challenge yourself by working on a project you don\u2019t have a lot of experience in. Try and find an employer willing to invest in your continuing education. That way, if there is something you really want to spend your free time working towards, at least you are getting paid for it  rather than just sacrificing of yourself.\n\nJust remember, don\u2019t compare yourself to others around you. Look in the mirror and focus on what change you want to see looking back at you.",
            "ups": 1,
            "downs": 0,
            "subreddit": "learnprogramming"
        },
        {
            "body": "People in CS probably spend 20% of their assignments programming...The rest is theory",
            "ups": 1,
            "downs": 0,
            "subreddit": "learnprogramming"
        },
        {
            "body": "it's okay for me, since I'm actually interested in this field. If I don't have a (dev) job, I'd still learning and make something on my own.",
            "ups": 1,
            "downs": 0,
            "subreddit": "learnprogramming"
        },
        {
            "body": "Just like everyone else in software, if you aren't studying anyway you're falling behind, this industry is fast moving with lots of new tech sprouting up all the time",
            "ups": 1,
            "downs": 0,
            "subreddit": "learnprogramming"
        },
        {
            "body": ">Am I destined to have to spend all of my spare time immersed in code in order to improve?\n\nNah, you'll catch up eventually. Soon if we are talking just about code. Sooner if there are good senior devs next to you.\n\nBut there's a limit to what the job can teach you. If you go beyond that and keep spending your free time in learning, you'll be part of the very small % of the devs that keeps trying to be better years into their career.",
            "ups": 1,
            "downs": 0,
            "subreddit": "learnprogramming"
        },
        {
            "body": "Lol I come from Cameroon in Africa, learnt programming as a kid. Worked freelance as web dev/graphic designer. Made a portfolio when I moved or Germany and still landed jobs despite being 18. Never bothered about not knowing anything. All I knew is that I was open and ready to work in new stuff and learn. \n\nDon\u2019t sweat it too much buddy. \nI\u2019m 21 and just landed another job. Just be confident and show what you can do",
            "ups": 1,
            "downs": 0,
            "subreddit": "learnprogramming"
        },
        {
            "body": "I don't and never have. \n\nCS degrees are not that useful for the vast majority of dev work. As I heard it put recently, programmers just call .Sort() while computer scientists write new sorting algorithms. \n\nUnless  you _want_ to get into actual computer science, CS degrees are largely overblown. Every now and then, a new tech or framework comes out that you need to sit down and learn (like React or something), but it's not the same as studying CS textbooks to compete with graduates. \n\nIf you just want to write accounting software for some corporation, you'll be fine. If you want to help Elon put men on Mars, your concerns are well founded.",
            "ups": 1,
            "downs": 0,
            "subreddit": "learnprogramming"
        },
        {
            "body": "I haven't really coded much extra in my free time in years now. Which is kind of unfortunate to be honest since I totally would like to progress my hobby indie game projects and AI and statistical analysis learning projects.\n\nAnyhow, after a certain point you learn what you need to learn at work. It's expected that a new person in a project has a certain learning period to get fully up to speed.",
            "ups": 1,
            "downs": 0,
            "subreddit": "learnprogramming"
        },
        {
            "body": "Grow up dude. Stop having that inferiority complex",
            "ups": -2,
            "downs": 0,
            "subreddit": "learnprogramming"
        },
        {
            "body": "not all cs are updated, some are left behind too and pressured to self learn just to prove that they are cs grad..",
            "ups": 0,
            "downs": 0,
            "subreddit": "learnprogramming"
        },
        {
            "body": "I think you assume CS grads won't have study in their spare time. A degree won't make you rest on your laurels and never pick up new technologies again.\n\nI had people changing their degree halfway once they realized what software development requires.",
            "ups": 0,
            "downs": 0,
            "subreddit": "learnprogramming"
        },
        {
            "body": "I don\u2019t.  Just get work done.  Get paid well.  Chad and his friends can go to hell in their country clubs.",
            "ups": 0,
            "downs": 0,
            "subreddit": "learnprogramming"
        },
        {
            "body": "Experience > pure theory\n\nAlso, if they know more about something, instead of trying to catch up on your spare time, just ask them to explain.",
            "ups": 0,
            "downs": 0,
            "subreddit": "learnprogramming"
        },
        {
            "body": "CS degree students don't have some God-like knowledge or ability because they took a couple more classes than you have. And, 95% of the time, they have progressed to where they are through practice. So code your little heart out. Keep looking for ways to make your code more clear and efficient. You'll get there.",
            "ups": 0,
            "downs": 0,
            "subreddit": "learnprogramming"
        },
        {
            "body": "I didn't. I just accepted I was at an initial disadvantage (and accepted the lower pay for it). After a few years experience it doesn't matter. I obviously felt the need to fill the gaps in my knowledge but actually mostly did that on the job. I never came home feeling the need to study.",
            "ups": 0,
            "downs": 0,
            "subreddit": "learnprogramming"
        },
        {
            "body": "I used to code on my spare time until I started to burnout. Now I just deal with the feeling of being fired everyday, but at least I can have some free time",
            "ups": 0,
            "downs": 0,
            "subreddit": "learnprogramming"
        },
        {
            "body": "Most people have to learn in their spare time, or have companies that offer training time, and use that. In this field everyone is kind of in a always learning environment",
            "ups": 0,
            "downs": 0,
            "subreddit": "learnprogramming"
        },
        {
            "body": "I feel the same. There is so much to learn. But after 7-8hr work day I am too tired to do anything.",
            "ups": 0,
            "downs": 0,
            "subreddit": "learnprogramming"
        },
        {
            "body": "The way I see it: I always loved programming so I don\u2019t owe anything to CS grads nor feel inferior to them. My only real obstacle when it comes to not having a degree is possibly having to face prejudice from CS graduates. Many people think they are superior just because they got a piece of paper saying they are programmers. It\u2019s ridiculous, but unfortunately it can be a real obstacle to progress in your career if you have someone above who thinks this way.",
            "ups": 1,
            "downs": 0,
            "subreddit": "learnprogramming"
        },
        {
            "body": "You have to be *very explicit* when telling the computer what to do.\n\nYour \n\n     if (num1 and num2 and num3 and num 4> 0):\n\nis logically wrong albeit syntactically correct.\n\nComputers are dumb. If you don't tell them precisely what you want, you will get wrong answers.\n\nIn your case, you need the `>0` for each of the numbers.\n\nPython knows \"truthy\" values and that's what happens here. Only the very last number is compared, the others simply use their \"truthy\" values.",
            "ups": 24,
            "downs": 0,
            "subreddit": "learnprogramming"
        },
        {
            "body": "> if (num1 and num2 and num3 and num 4> 0):\n\nThis is equivalent to:\n\n    if(num1):\n        if(num2):\n            if(num3):\n                if(num4>0):\n\nDo you see what the issue is?",
            "ups": 31,
            "downs": 0,
            "subreddit": "learnprogramming"
        },
        {
            "body": "try something different. \n- init an array of four items\n- loop trough the array.\n    - on each iteration, ask for the input and store it in the position in the array.\n- when you\u2019re done. loop through the array to identify a negative one (you can also do this in the first loop... you\u2019d just have a create a top level variable \u201chasNegative\u201d, and you test for negativity right after you ask for input, and update hasNegative respectively)\n\norrr... if you still want to go your route.\n\n```\nif(num1 < 0 || num2 < 0 || num3 < 0 || num4 < 0) \n```\n\nthat should give evaluate to true if any of them are negative and false if none are.",
            "ups": 3,
            "downs": 0,
            "subreddit": "learnprogramming"
        },
        {
            "body": "[removed]",
            "ups": 2,
            "downs": 0,
            "subreddit": "learnprogramming"
        },
        {
            "body": "Hello,   \n\n\nOrganize correctly your if statements,  \nYou'll have something like this :  \n\n\nif ( (num1 > 0) and (num2 > 0) and (num3 > 0) and (num4 > 0)):   \n\n\nThis way it'll work",
            "ups": 2,
            "downs": 0,
            "subreddit": "learnprogramming"
        },
        {
            "body": "Use an array, then loop through it with a catch, notify negative, and break statement if a number is negative and then, if it reaches the end of the array, print the positive message.",
            "ups": 1,
            "downs": 0,
            "subreddit": "learnprogramming"
        },
        {
            "body": "By the way your program has a bug. What if I put a 0 when the program asks me for a number? 0 is not positivie nor negative but your program is going to say there's one negative number which is false.",
            "ups": 1,
            "downs": 0,
            "subreddit": "learnprogramming"
        },
        {
            "body": "Your approach will work. But it could be simpler. For example, if num1 is <=0 do you need to check the other 3 values? Or do you already know what you must print?",
            "ups": 1,
            "downs": 0,
            "subreddit": "learnprogramming"
        },
        {
            "body": "Legend!",
            "ups": 83,
            "downs": 0,
            "subreddit": "learnprogramming"
        },
        {
            "body": "Respect. Loved every single line with your hearth in hands",
            "ups": 46,
            "downs": 0,
            "subreddit": "learnprogramming"
        },
        {
            "body": "There's a couple things here that I think are especially important.\n\n* Domain knowledge.  \n\n Programmers are a dime a dozen. One of the best ways to stand out is to have another skill set you can apply. A programmer who knows finance, any scientific discipline, health care, or really anything becomes far more effective than a programmer who can only work by specification. I think it also makes learning to program easier when you can practice by solving/automating the problem space you already understand.\n\n* Projects  \n\n When I am looking at a resume for someone with little-to-no real world work experience, what I want to see is the ability to start and complete a project. Seeing completed projects that aren't just toys written for a class is worth a lot. Having it in a public repo where the code can be reviewed is similarly helpful.",
            "ups": 43,
            "downs": 0,
            "subreddit": "learnprogramming"
        },
        {
            "body": "The doers.",
            "ups": 15,
            "downs": 0,
            "subreddit": "learnprogramming"
        },
        {
            "body": "RN that started in 2019, hoping for a fresh start in software/web dev here too. Thanks for being a living example for me to work towards.",
            "ups": 12,
            "downs": 0,
            "subreddit": "learnprogramming"
        },
        {
            "body": "Also, don't be afraid to vent.",
            "ups": 12,
            "downs": 0,
            "subreddit": "learnprogramming"
        },
        {
            "body": "Amogus",
            "ups": 32,
            "downs": 0,
            "subreddit": "learnprogramming"
        },
        {
            "body": "you got this, proud of you!",
            "ups": 12,
            "downs": 0,
            "subreddit": "learnprogramming"
        },
        {
            "body": "Thank you so much for all you do and using your IT skills to improve healthcare. You nurses go through a lot and I commend you.",
            "ups": 9,
            "downs": 0,
            "subreddit": "learnprogramming"
        },
        {
            "body": "Fantastic post!\n\nThis is all things I've been thinking all along for the last 18 months as well.   Your part about knowing that someone can learn and then learn more is so spot on. \n\nCheers!",
            "ups": 11,
            "downs": 0,
            "subreddit": "learnprogramming"
        },
        {
            "body": ">Back yourself in your ability to learn and problem solve, not so much your knowledge on hand.\n\nLove this!",
            "ups": 8,
            "downs": 0,
            "subreddit": "learnprogramming"
        },
        {
            "body": "Thank you for your excellent story! It was very positive and I enjoyed it. I will admit that even as a senior dev, I suffer from imposter syndrome. Sometimes, it is tough to be confident in me, even though people around me tell me that I'm doing a good job. I know imposter syndrome is genuine, and I empathize with those struggling with it.",
            "ups": 9,
            "downs": 0,
            "subreddit": "learnprogramming"
        },
        {
            "body": "Thank you for this. I'm an RN who has been wanting a career change for a while. I'm almost done with a bootcamp and am wrestling with imposter syndrome for sure. Thank you for this encouraging post.",
            "ups": 5,
            "downs": 0,
            "subreddit": "learnprogramming"
        },
        {
            "body": "Good for you!",
            "ups": 3,
            "downs": 0,
            "subreddit": "learnprogramming"
        },
        {
            "body": "You're awesome, and you're exactly right!  If your tool saves you and others in your profession from doing boring computer busywork, you have absolutely created something valuable.  You should be extremely proud of what you've learned and made!",
            "ups": 3,
            "downs": 0,
            "subreddit": "learnprogramming"
        },
        {
            "body": "Congratulations. I felt similarly when I took on my first commercial project. But low and behold, a year on the client is very happy and is raking in the cash from using my program and hardware.\n\nBiggest learning point is I VASTLY undercharged. By a factor of 10.",
            "ups": 3,
            "downs": 0,
            "subreddit": "learnprogramming"
        },
        {
            "body": "Thank you, I really needed this.",
            "ups": 3,
            "downs": 0,
            "subreddit": "learnprogramming"
        },
        {
            "body": "as a nurse that is trying desperately to learn to code and get out of healthcare, this is inspiring.",
            "ups": 3,
            "downs": 0,
            "subreddit": "learnprogramming"
        },
        {
            "body": "You made a app with Tkinter? Nice....\n\nThats my tool of choice for learning python. I love it",
            "ups": 3,
            "downs": 0,
            "subreddit": "learnprogramming"
        },
        {
            "body": "I was in Electrical bro don't Just sus me like that",
            "ups": 3,
            "downs": 0,
            "subreddit": "learnprogramming"
        },
        {
            "body": "No i promise yellow saw me scan right? Yellow?? YELLOW NO",
            "ups": 3,
            "downs": 0,
            "subreddit": "learnprogramming"
        },
        {
            "body": "Needed to read this today. You are awesome! Thank you\ud83d\ude0e",
            "ups": 2,
            "downs": 0,
            "subreddit": "learnprogramming"
        },
        {
            "body": "This made me feel so much better. Thank you.",
            "ups": 2,
            "downs": 0,
            "subreddit": "learnprogramming"
        },
        {
            "body": "Thank you so much for this post, definitely what I needed to hear right now. Much appreciated and keep kicking ass.",
            "ups": 2,
            "downs": 0,
            "subreddit": "learnprogramming"
        },
        {
            "body": "I'm a senior service designer and a developer. This was a very inspiring post to read.",
            "ups": 2,
            "downs": 0,
            "subreddit": "learnprogramming"
        },
        {
            "body": "Wonderful!! I have a parent in a nursing home and can't thank you enough.",
            "ups": 2,
            "downs": 0,
            "subreddit": "learnprogramming"
        },
        {
            "body": "Feels like you could have hired someone to do it :)\n\nBut great job nonetheless!",
            "ups": 2,
            "downs": 0,
            "subreddit": "learnprogramming"
        },
        {
            "body": "Saving this for down the road when I'm depressed and overwhelmed by it all, thanks OP!",
            "ups": 2,
            "downs": 0,
            "subreddit": "learnprogramming"
        },
        {
            "body": "This is great! I love Tkinter. Learned a lot about Python using it. And one of my favorite videos about it is from Pycon Australia. Well done!",
            "ups": 2,
            "downs": 0,
            "subreddit": "learnprogramming"
        },
        {
            "body": "Thank you, lately I've been having too many issues with impostor syndrome that made me stuck in place. Was nice to read this :)",
            "ups": 2,
            "downs": 0,
            "subreddit": "learnprogramming"
        },
        {
            "body": "It's 12PM, i just read this and got an idea about this project I'm working on. Thank you for the inspiration!",
            "ups": 2,
            "downs": 0,
            "subreddit": "learnprogramming"
        },
        {
            "body": "Thanks for sharing and congrats!",
            "ups": 2,
            "downs": 0,
            "subreddit": "learnprogramming"
        },
        {
            "body": "Hey it sounds like you've managed to get some pretty solid confidence with where you're at, but if it helps you at all then you should know that just because a program is written by a team of senior devs does not mean it's going to be good. I'm not a dev, i'm not a programmer, i'm just an IT guy who likes to code sometimes and usually writes code that makes my friends who are developers say \"dear god dude this hurts to read\", but the company I work for pays half a million dollars annually for an ERP system that's full to the gills with code that even I would be embarrassed to say I wrote.",
            "ups": 2,
            "downs": 0,
            "subreddit": "learnprogramming"
        },
        {
            "body": "Any pics of your launched app?  I must have missed it.",
            "ups": 2,
            "downs": 0,
            "subreddit": "learnprogramming"
        },
        {
            "body": "Fantastic! So what happened with your tool? What was the response?",
            "ups": 2,
            "downs": 0,
            "subreddit": "learnprogramming"
        },
        {
            "body": "Absolute legend, great work! I love how excited you are about it and its great you found a project to develop your skill with, I think having a project helps sooo much.",
            "ups": 2,
            "downs": 0,
            "subreddit": "learnprogramming"
        },
        {
            "body": "Such a wholesome post. Thank you!",
            "ups": 2,
            "downs": 0,
            "subreddit": "learnprogramming"
        },
        {
            "body": "\u201cBack yourself on your ability to learn and problems solve, not so much on your knowledge on hand\u201d - wow, what a great quote. I\u2019m a software engineer with over a decade of experience and I have badly suffered with this, this really helped. Thanks",
            "ups": 2,
            "downs": 0,
            "subreddit": "learnprogramming"
        },
        {
            "body": "I started learning python back in 2016 and then gave up bcs I suck at time management, picked it up again couple of months ago. Posts like this inspire me, thanks for opensource inspiration.",
            "ups": 2,
            "downs": 0,
            "subreddit": "learnprogramming"
        },
        {
            "body": "S U S",
            "ups": 2,
            "downs": 0,
            "subreddit": "learnprogramming"
        },
        {
            "body": "Wow, thanks for sharing your story!\n\nHere's an interesting fact: most known programmers back in the day started out scratching their own itches, venerable projects were born that way, that's what used to be the *hacker culture* before popular culture took over it to portray hackers as kiddos stealing bank accounts. So, in a way, you are now part of that hacker culture.",
            "ups": 2,
            "downs": 0,
            "subreddit": "learnprogramming"
        },
        {
            "body": "I'm just starting the coursera python for everyone spec audit only.\n\nI've been playing with programming since i was a kid and I'm sick of customer service jobs, so I'm going to give programming a serious try.\n\nI really appreciate you making this post. I hope to see more from you in the future!",
            "ups": 2,
            "downs": 0,
            "subreddit": "learnprogramming"
        },
        {
            "body": ">After 2 weeks of building my first tool day and night (and loving every minute of it), Imposter Syndrome started to take over. I am just an Aged Care Nurse who has only been learning to code online. I don't know anything, I can't launch an Application like this.\n\nPlease, for the love of god, stop appropriating Impostor Syndrome for something that is completely different and almost unrelated.\n\nFeeling like a fraud before you have accomplished anything is shitty and as hard as it is, but that's not what Impostor Syndrome is about at all.\n\nI don't want to take away from you accomplishemnt, which is great and awesome and I highly applaud you, seriously.\n\nBut Impostor Syndrome and having slf doubts in the beginning are completely different.\n\nImpostor syndrome is about feeling like a fraud when you already have a proven track record of accomplishing things. Not when you start out. It's impssobile to have impostor syndrome without this.\n\nIt gets increasingly heard for people suffering from IS (which is a lot of people in the tech world who really suffer from it) to talk about it online, when people start mis-using this term like this\n\nPlease don't",
            "ups": 2,
            "downs": 0,
            "subreddit": "learnprogramming"
        },
        {
            "body": "This is incredible!!! This has really put a spring in my step for this morning\u2019s learning.",
            "ups": 2,
            "downs": 0,
            "subreddit": "learnprogramming"
        },
        {
            "body": "Hey,\nI have bachelor in  finance nd  I'm starting python as my first language any suggestions which courses or where should I start.\n\nNo experience in coding at all. But I'm ready to put in the effort.\n\nI read it, you're an inspiration for me.\n\nHope u would help.",
            "ups": 2,
            "downs": 0,
            "subreddit": "learnprogramming"
        },
        {
            "body": "The fact that you as a nurse even did this or started this is mind boggling- congratulations that\u2019s impressive. Most nurses I\u2019ve met stayed away from anything programming. Impressive",
            "ups": 2,
            "downs": 0,
            "subreddit": "learnprogramming"
        },
        {
            "body": "IMPOSTER??? SUS SUS AMONG US SUS IMPOSTER KEANU 100 SUS AMONG US AMONG USSSSSSS AMONG US SUS SUS AMONG AUS S USUSAUSUSUSUUSUHSU9-QWE 8U",
            "ups": 6,
            "downs": 0,
            "subreddit": "learnprogramming"
        },
        {
            "body": "Very inspiring, keep it up!",
            "ups": 4,
            "downs": 0,
            "subreddit": "learnprogramming"
        },
        {
            "body": "Sussy Baka \u0d9e",
            "ups": 2,
            "downs": 0,
            "subreddit": "learnprogramming"
        },
        {
            "body": "I'm a junior CS major and I even i feel like an imposter at times. Your words are inspirational",
            "ups": 2,
            "downs": 0,
            "subreddit": "learnprogramming"
        },
        {
            "body": "Literally just launched my first python tool into the company today felt so nervous and red faced explaining it, spent a large portion of the day waiting for someone to come back to me saying its destroyed their pc even though that's not a thing.\n\nThank you for the post really reassuring",
            "ups": 1,
            "downs": 0,
            "subreddit": "learnprogramming"
        },
        {
            "body": "That's really nice to see.\n\nI am doubting myself a lot too, thanks for sharing and good luck in your journey",
            "ups": 1,
            "downs": 0,
            "subreddit": "learnprogramming"
        },
        {
            "body": "Nice to hear that, is your tool available online ?",
            "ups": 1,
            "downs": 0,
            "subreddit": "learnprogramming"
        },
        {
            "body": "Nothing for Los Angeles except Beverly Hills. I guess those Gucci and Bentley sales tax gets them some enhanced public services.",
            "ups": 19,
            "downs": 0,
            "subreddit": "learnprogramming"
        },
        {
            "body": "I'm a librarian and I got \"Error Oops We're unable to find a SaaS application for the SAML response received.\"   :(",
            "ups": 4,
            "downs": 0,
            "subreddit": "learnprogramming"
        },
        {
            "body": "Can't seem to find it for the New York public library (NYPL)",
            "ups": 3,
            "downs": 0,
            "subreddit": "learnprogramming"
        },
        {
            "body": "San Fran works - I lied got hit with the suspicious activity. And they haven\u2019t update their ssl certs on the site. It\u2019s throwing errors allover the place.",
            "ups": 2,
            "downs": 0,
            "subreddit": "learnprogramming"
        },
        {
            "body": "Nothing for my library unfortunately.",
            "ups": 1,
            "downs": 0,
            "subreddit": "learnprogramming"
        },
        {
            "body": "Oh my god \ud83d\ude4c\ud83d\ude4c\ud83d\ude4c thank you",
            "ups": 1,
            "downs": 0,
            "subreddit": "learnprogramming"
        },
        {
            "body": "I think you are worrying too much.  If it really bothers you pick a schools curriculum and work through it",
            "ups": 72,
            "downs": 0,
            "subreddit": "learnprogramming"
        },
        {
            "body": "First, stop comparing yourself to others. Plenty of people will do that for you. It is a losing game. You will always find people better than you, and it can paralyze you.\n\nNext, realize that you need to improve yourself every day. This will never go away. Decide what success means for you, and go get it. Determine every day how you can be better and do it. Working on yourself pays out exponentially, not linearly.\n\nFinally, let go of the guilt. Guilt is a social construct and only works if you let it. You have to hold onto that guilt for it to affect you in any meaningful way. Holding onto guilt is just causing stress which only serves to shorten your life. To quote a very old song, \"Don't worry. Be happy\"",
            "ups": 60,
            "downs": 0,
            "subreddit": "learnprogramming"
        },
        {
            "body": "News flash;  CS grads also spend their spare time working on improvement.  It doesn't have to feel like playing catchup, but DO expect to spend some time learning things outside your current work.  It's an ever-evolving craft.",
            "ups": 13,
            "downs": 0,
            "subreddit": "learnprogramming"
        },
        {
            "body": "After ~2 years of experience a CS degree literally means nothing. It\u2019s like saying, I never graduated kindergarten how can I compete with my fellow calculus students.",
            "ups": 37,
            "downs": 0,
            "subreddit": "learnprogramming"
        },
        {
            "body": "This sub is really going crazy over cs-grads being some kind of magical creatures. We also need to self-learn, you can't learn to program without self learning. Degree won't teach you how to program.. you need to do it in your spare time.",
            "ups": 14,
            "downs": 0,
            "subreddit": "learnprogramming"
        },
        {
            "body": "CS majors don't study programming any more than astronomy majors study telescopes. They *especially* don't study professional software development. There's no respect in which you should think they set the baseline.",
            "ups": 3,
            "downs": 0,
            "subreddit": "learnprogramming"
        },
        {
            "body": "Our best programmers are the tinkerers, the people who do it just for doing it.  A lot of the college grads are just there for a paycheck, they shut down on the weekends while others do it for fun.\n\nCareers also go in five year cycles, if some guy is doing the same thing for 15 years, he's probably exhausted his expertise level, unless they put massive hours into the craft, but most just end up doing the bare minimum.  Don't let it get to you.\n\nThat's probably not the case at the high end FAANG levels, but at an average shop, it will be.",
            "ups": 10,
            "downs": 0,
            "subreddit": "learnprogramming"
        },
        {
            "body": "You know : **self learners are the best**. Because they always have the motivation to improve themselves. You don't have to compete them, you have to compete yourself. So my friend, like Elsa said:\n\n                                    LET IT GO",
            "ups": 2,
            "downs": 0,
            "subreddit": "learnprogramming"
        },
        {
            "body": "I'm a CS grad and I'm still studying on my own/doing own projects after work time. It's not because I have to, rather I just like doing it and learning new things. It's like a hobby and I believe that there are plenty ppl like me in industry. But I don't think its majority. I know a lot of CS grads which just went to uni because parents sent them there or just they didn't know what they want to do in their lives.",
            "ups": 1,
            "downs": 0,
            "subreddit": "learnprogramming"
        },
        {
            "body": "I dropped out of art school. I liked computers, though, and really just had fun playing with them and learning how they work.\n\nI taught myself a lot, asked tons of questions, and continuously sought out people who knew more than me. Ten years later, I do pretty much the same thing - except now I\u2019m hiring people who know more than me. I still actively surround myself with individuals who push me to grow, while reinforcing my current knowledge by mentoring the mids and juniors.\n\nOthers have said it, but if you find yourself the most knowledgeable in the room, you\u2019ve hit a dead end, and that should not be your goal. Disparity in knowledge with peers shouldn\u2019t scare you, but an absence of passion should. As long as you make sure the content, languages, frameworks, industries, or colleagues, etc. are enough to fuel your passion, the learning and growth will come in time.\n\nFind someone with whom to pair program and don\u2019t be afraid to ask them \u201cstupid\u201d questions! Having never taken a CS class, starting out I had to ask coworkers to explain a tuple, and what a \u201cGitHub\u201d was. Pairing up on a fun personal project is a great way to enjoy the learning process more. Also, you\u2019ll probably find you get more out of it, with less time investment, than doing it on your own.\n\nIt\u2019ll be ok, just stay curious :)",
            "ups": 1,
            "downs": 0,
            "subreddit": "learnprogramming"
        },
        {
            "body": "Always invest in your personal well being first and take time to enjoy life outside of work. But also realize that if you stagnate and don\u2019t try to push yourself to learn more then it\u2019s not a matter of someone becoming better. You simply will become bored where you are at.\n\nTry and find ways to incorporate learning new things at work. Challenge yourself by working on a project you don\u2019t have a lot of experience in. Try and find an employer willing to invest in your continuing education. That way, if there is something you really want to spend your free time working towards, at least you are getting paid for it  rather than just sacrificing of yourself.\n\nJust remember, don\u2019t compare yourself to others around you. Look in the mirror and focus on what change you want to see looking back at you.",
            "ups": 1,
            "downs": 0,
            "subreddit": "learnprogramming"
        },
        {
            "body": "People in CS probably spend 20% of their assignments programming...The rest is theory",
            "ups": 1,
            "downs": 0,
            "subreddit": "learnprogramming"
        },
        {
            "body": "it's okay for me, since I'm actually interested in this field. If I don't have a (dev) job, I'd still learning and make something on my own.",
            "ups": 1,
            "downs": 0,
            "subreddit": "learnprogramming"
        },
        {
            "body": "Just like everyone else in software, if you aren't studying anyway you're falling behind, this industry is fast moving with lots of new tech sprouting up all the time",
            "ups": 1,
            "downs": 0,
            "subreddit": "learnprogramming"
        },
        {
            "body": ">Am I destined to have to spend all of my spare time immersed in code in order to improve?\n\nNah, you'll catch up eventually. Soon if we are talking just about code. Sooner if there are good senior devs next to you.\n\nBut there's a limit to what the job can teach you. If you go beyond that and keep spending your free time in learning, you'll be part of the very small % of the devs that keeps trying to be better years into their career.",
            "ups": 1,
            "downs": 0,
            "subreddit": "learnprogramming"
        },
        {
            "body": "Lol I come from Cameroon in Africa, learnt programming as a kid. Worked freelance as web dev/graphic designer. Made a portfolio when I moved or Germany and still landed jobs despite being 18. Never bothered about not knowing anything. All I knew is that I was open and ready to work in new stuff and learn. \n\nDon\u2019t sweat it too much buddy. \nI\u2019m 21 and just landed another job. Just be confident and show what you can do",
            "ups": 1,
            "downs": 0,
            "subreddit": "learnprogramming"
        },
        {
            "body": "I don't and never have. \n\nCS degrees are not that useful for the vast majority of dev work. As I heard it put recently, programmers just call .Sort() while computer scientists write new sorting algorithms. \n\nUnless  you _want_ to get into actual computer science, CS degrees are largely overblown. Every now and then, a new tech or framework comes out that you need to sit down and learn (like React or something), but it's not the same as studying CS textbooks to compete with graduates. \n\nIf you just want to write accounting software for some corporation, you'll be fine. If you want to help Elon put men on Mars, your concerns are well founded.",
            "ups": 1,
            "downs": 0,
            "subreddit": "learnprogramming"
        },
        {
            "body": "I haven't really coded much extra in my free time in years now. Which is kind of unfortunate to be honest since I totally would like to progress my hobby indie game projects and AI and statistical analysis learning projects.\n\nAnyhow, after a certain point you learn what you need to learn at work. It's expected that a new person in a project has a certain learning period to get fully up to speed.",
            "ups": 1,
            "downs": 0,
            "subreddit": "learnprogramming"
        },
        {
            "body": "Grow up dude. Stop having that inferiority complex",
            "ups": -2,
            "downs": 0,
            "subreddit": "learnprogramming"
        },
        {
            "body": "not all cs are updated, some are left behind too and pressured to self learn just to prove that they are cs grad..",
            "ups": 0,
            "downs": 0,
            "subreddit": "learnprogramming"
        },
        {
            "body": "I think you assume CS grads won't have study in their spare time. A degree won't make you rest on your laurels and never pick up new technologies again.\n\nI had people changing their degree halfway once they realized what software development requires.",
            "ups": 0,
            "downs": 0,
            "subreddit": "learnprogramming"
        },
        {
            "body": "I don\u2019t.  Just get work done.  Get paid well.  Chad and his friends can go to hell in their country clubs.",
            "ups": 0,
            "downs": 0,
            "subreddit": "learnprogramming"
        },
        {
            "body": "Experience > pure theory\n\nAlso, if they know more about something, instead of trying to catch up on your spare time, just ask them to explain.",
            "ups": 0,
            "downs": 0,
            "subreddit": "learnprogramming"
        },
        {
            "body": "CS degree students don't have some God-like knowledge or ability because they took a couple more classes than you have. And, 95% of the time, they have progressed to where they are through practice. So code your little heart out. Keep looking for ways to make your code more clear and efficient. You'll get there.",
            "ups": 0,
            "downs": 0,
            "subreddit": "learnprogramming"
        },
        {
            "body": "I didn't. I just accepted I was at an initial disadvantage (and accepted the lower pay for it). After a few years experience it doesn't matter. I obviously felt the need to fill the gaps in my knowledge but actually mostly did that on the job. I never came home feeling the need to study.",
            "ups": 0,
            "downs": 0,
            "subreddit": "learnprogramming"
        },
        {
            "body": "I used to code on my spare time until I started to burnout. Now I just deal with the feeling of being fired everyday, but at least I can have some free time",
            "ups": 0,
            "downs": 0,
            "subreddit": "learnprogramming"
        },
        {
            "body": "Most people have to learn in their spare time, or have companies that offer training time, and use that. In this field everyone is kind of in a always learning environment",
            "ups": 0,
            "downs": 0,
            "subreddit": "learnprogramming"
        },
        {
            "body": "I feel the same. There is so much to learn. But after 7-8hr work day I am too tired to do anything.",
            "ups": 0,
            "downs": 0,
            "subreddit": "learnprogramming"
        },
        {
            "body": "The way I see it: I always loved programming so I don\u2019t owe anything to CS grads nor feel inferior to them. My only real obstacle when it comes to not having a degree is possibly having to face prejudice from CS graduates. Many people think they are superior just because they got a piece of paper saying they are programmers. It\u2019s ridiculous, but unfortunately it can be a real obstacle to progress in your career if you have someone above who thinks this way.",
            "ups": 1,
            "downs": 0,
            "subreddit": "learnprogramming"
        },
        {
            "body": "You have to be *very explicit* when telling the computer what to do.\n\nYour \n\n     if (num1 and num2 and num3 and num 4> 0):\n\nis logically wrong albeit syntactically correct.\n\nComputers are dumb. If you don't tell them precisely what you want, you will get wrong answers.\n\nIn your case, you need the `>0` for each of the numbers.\n\nPython knows \"truthy\" values and that's what happens here. Only the very last number is compared, the others simply use their \"truthy\" values.",
            "ups": 25,
            "downs": 0,
            "subreddit": "learnprogramming"
        },
        {
            "body": "> if (num1 and num2 and num3 and num 4> 0):\n\nThis is equivalent to:\n\n    if(num1):\n        if(num2):\n            if(num3):\n                if(num4>0):\n\nDo you see what the issue is?",
            "ups": 33,
            "downs": 0,
            "subreddit": "learnprogramming"
        },
        {
            "body": "try something different. \n- init an array of four items\n- loop trough the array.\n    - on each iteration, ask for the input and store it in the position in the array.\n- when you\u2019re done. loop through the array to identify a negative one (you can also do this in the first loop... you\u2019d just have a create a top level variable \u201chasNegative\u201d, and you test for negativity right after you ask for input, and update hasNegative respectively)\n\norrr... if you still want to go your route.\n\n```\nif(num1 < 0 || num2 < 0 || num3 < 0 || num4 < 0) \n```\n\nthat should give evaluate to true if any of them are negative and false if none are.",
            "ups": 3,
            "downs": 0,
            "subreddit": "learnprogramming"
        },
        {
            "body": "[removed]",
            "ups": 2,
            "downs": 0,
            "subreddit": "learnprogramming"
        },
        {
            "body": "Hello,   \n\n\nOrganize correctly your if statements,  \nYou'll have something like this :  \n\n\nif ( (num1 > 0) and (num2 > 0) and (num3 > 0) and (num4 > 0)):   \n\n\nThis way it'll work",
            "ups": 2,
            "downs": 0,
            "subreddit": "learnprogramming"
        },
        {
            "body": "Use an array, then loop through it with a catch, notify negative, and break statement if a number is negative and then, if it reaches the end of the array, print the positive message.",
            "ups": 1,
            "downs": 0,
            "subreddit": "learnprogramming"
        },
        {
            "body": "By the way your program has a bug. What if I put a 0 when the program asks me for a number? 0 is not positivie nor negative but your program is going to say there's one negative number which is false.",
            "ups": 1,
            "downs": 0,
            "subreddit": "learnprogramming"
        },
        {
            "body": "Your approach will work. But it could be simpler. For example, if num1 is <=0 do you need to check the other 3 values? Or do you already know what you must print?",
            "ups": 1,
            "downs": 0,
            "subreddit": "learnprogramming"
        },
        {
            "body": "Legend!",
            "ups": 83,
            "downs": 0,
            "subreddit": "learnprogramming"
        },
        {
            "body": "Respect. Loved every single line with your hearth in hands",
            "ups": 48,
            "downs": 0,
            "subreddit": "learnprogramming"
        },
        {
            "body": "There's a couple things here that I think are especially important.\n\n* Domain knowledge.  \n\n Programmers are a dime a dozen. One of the best ways to stand out is to have another skill set you can apply. A programmer who knows finance, any scientific discipline, health care, or really anything becomes far more effective than a programmer who can only work by specification. I think it also makes learning to program easier when you can practice by solving/automating the problem space you already understand.\n\n* Projects  \n\n When I am looking at a resume for someone with little-to-no real world work experience, what I want to see is the ability to start and complete a project. Seeing completed projects that aren't just toys written for a class is worth a lot. Having it in a public repo where the code can be reviewed is similarly helpful.",
            "ups": 43,
            "downs": 0,
            "subreddit": "learnprogramming"
        },
        {
            "body": "The doers.",
            "ups": 17,
            "downs": 0,
            "subreddit": "learnprogramming"
        },
        {
            "body": "RN that started in 2019, hoping for a fresh start in software/web dev here too. Thanks for being a living example for me to work towards.",
            "ups": 15,
            "downs": 0,
            "subreddit": "learnprogramming"
        },
        {
            "body": "Also, don't be afraid to vent.",
            "ups": 12,
            "downs": 0,
            "subreddit": "learnprogramming"
        },
        {
            "body": "Amogus",
            "ups": 33,
            "downs": 0,
            "subreddit": "learnprogramming"
        },
        {
            "body": "you got this, proud of you!",
            "ups": 11,
            "downs": 0,
            "subreddit": "learnprogramming"
        },
        {
            "body": "Thank you so much for all you do and using your IT skills to improve healthcare. You nurses go through a lot and I commend you.",
            "ups": 11,
            "downs": 0,
            "subreddit": "learnprogramming"
        },
        {
            "body": "Fantastic post!\n\nThis is all things I've been thinking all along for the last 18 months as well.   Your part about knowing that someone can learn and then learn more is so spot on. \n\nCheers!",
            "ups": 10,
            "downs": 0,
            "subreddit": "learnprogramming"
        },
        {
            "body": ">Back yourself in your ability to learn and problem solve, not so much your knowledge on hand.\n\nLove this!",
            "ups": 7,
            "downs": 0,
            "subreddit": "learnprogramming"
        },
        {
            "body": "Thank you for your excellent story! It was very positive and I enjoyed it. I will admit that even as a senior dev, I suffer from imposter syndrome. Sometimes, it is tough to be confident in me, even though people around me tell me that I'm doing a good job. I know imposter syndrome is genuine, and I empathize with those struggling with it.",
            "ups": 8,
            "downs": 0,
            "subreddit": "learnprogramming"
        },
        {
            "body": "Thank you for this. I'm an RN who has been wanting a career change for a while. I'm almost done with a bootcamp and am wrestling with imposter syndrome for sure. Thank you for this encouraging post.",
            "ups": 5,
            "downs": 0,
            "subreddit": "learnprogramming"
        },
        {
            "body": "Good for you!",
            "ups": 3,
            "downs": 0,
            "subreddit": "learnprogramming"
        },
        {
            "body": "You're awesome, and you're exactly right!  If your tool saves you and others in your profession from doing boring computer busywork, you have absolutely created something valuable.  You should be extremely proud of what you've learned and made!",
            "ups": 3,
            "downs": 0,
            "subreddit": "learnprogramming"
        },
        {
            "body": "Congratulations. I felt similarly when I took on my first commercial project. But low and behold, a year on the client is very happy and is raking in the cash from using my program and hardware.\n\nBiggest learning point is I VASTLY undercharged. By a factor of 10.",
            "ups": 3,
            "downs": 0,
            "subreddit": "learnprogramming"
        },
        {
            "body": "Thank you, I really needed this.",
            "ups": 3,
            "downs": 0,
            "subreddit": "learnprogramming"
        },
        {
            "body": "as a nurse that is trying desperately to learn to code and get out of healthcare, this is inspiring.",
            "ups": 3,
            "downs": 0,
            "subreddit": "learnprogramming"
        },
        {
            "body": "You made a app with Tkinter? Nice....\n\nThats my tool of choice for learning python. I love it",
            "ups": 3,
            "downs": 0,
            "subreddit": "learnprogramming"
        },
        {
            "body": "I was in Electrical bro don't Just sus me like that",
            "ups": 3,
            "downs": 0,
            "subreddit": "learnprogramming"
        },
        {
            "body": "No i promise yellow saw me scan right? Yellow?? YELLOW NO",
            "ups": 3,
            "downs": 0,
            "subreddit": "learnprogramming"
        },
        {
            "body": "Needed to read this today. You are awesome! Thank you\ud83d\ude0e",
            "ups": 2,
            "downs": 0,
            "subreddit": "learnprogramming"
        },
        {
            "body": "This made me feel so much better. Thank you.",
            "ups": 2,
            "downs": 0,
            "subreddit": "learnprogramming"
        },
        {
            "body": "Thank you so much for this post, definitely what I needed to hear right now. Much appreciated and keep kicking ass.",
            "ups": 2,
            "downs": 0,
            "subreddit": "learnprogramming"
        },
        {
            "body": "I'm a senior service designer and a developer. This was a very inspiring post to read.",
            "ups": 2,
            "downs": 0,
            "subreddit": "learnprogramming"
        },
        {
            "body": "Wonderful!! I have a parent in a nursing home and can't thank you enough.",
            "ups": 2,
            "downs": 0,
            "subreddit": "learnprogramming"
        },
        {
            "body": "Feels like you could have hired someone to do it :)\n\nBut great job nonetheless!",
            "ups": 2,
            "downs": 0,
            "subreddit": "learnprogramming"
        },
        {
            "body": "Saving this for down the road when I'm depressed and overwhelmed by it all, thanks OP!",
            "ups": 2,
            "downs": 0,
            "subreddit": "learnprogramming"
        },
        {
            "body": "This is great! I love Tkinter. Learned a lot about Python using it. And one of my favorite videos about it is from Pycon Australia. Well done!",
            "ups": 2,
            "downs": 0,
            "subreddit": "learnprogramming"
        },
        {
            "body": "Thank you, lately I've been having too many issues with impostor syndrome that made me stuck in place. Was nice to read this :)",
            "ups": 2,
            "downs": 0,
            "subreddit": "learnprogramming"
        },
        {
            "body": "It's 12PM, i just read this and got an idea about this project I'm working on. Thank you for the inspiration!",
            "ups": 2,
            "downs": 0,
            "subreddit": "learnprogramming"
        },
        {
            "body": "Thanks for sharing and congrats!",
            "ups": 2,
            "downs": 0,
            "subreddit": "learnprogramming"
        },
        {
            "body": "Hey it sounds like you've managed to get some pretty solid confidence with where you're at, but if it helps you at all then you should know that just because a program is written by a team of senior devs does not mean it's going to be good. I'm not a dev, i'm not a programmer, i'm just an IT guy who likes to code sometimes and usually writes code that makes my friends who are developers say \"dear god dude this hurts to read\", but the company I work for pays half a million dollars annually for an ERP system that's full to the gills with code that even I would be embarrassed to say I wrote.",
            "ups": 2,
            "downs": 0,
            "subreddit": "learnprogramming"
        },
        {
            "body": "Any pics of your launched app?  I must have missed it.",
            "ups": 2,
            "downs": 0,
            "subreddit": "learnprogramming"
        },
        {
            "body": "Fantastic! So what happened with your tool? What was the response?",
            "ups": 2,
            "downs": 0,
            "subreddit": "learnprogramming"
        },
        {
            "body": "Absolute legend, great work! I love how excited you are about it and its great you found a project to develop your skill with, I think having a project helps sooo much.",
            "ups": 2,
            "downs": 0,
            "subreddit": "learnprogramming"
        },
        {
            "body": "Such a wholesome post. Thank you!",
            "ups": 2,
            "downs": 0,
            "subreddit": "learnprogramming"
        },
        {
            "body": "\u201cBack yourself on your ability to learn and problems solve, not so much on your knowledge on hand\u201d - wow, what a great quote. I\u2019m a software engineer with over a decade of experience and I have badly suffered with this, this really helped. Thanks",
            "ups": 2,
            "downs": 0,
            "subreddit": "learnprogramming"
        },
        {
            "body": "I started learning python back in 2016 and then gave up bcs I suck at time management, picked it up again couple of months ago. Posts like this inspire me, thanks for opensource inspiration.",
            "ups": 2,
            "downs": 0,
            "subreddit": "learnprogramming"
        },
        {
            "body": "S U S",
            "ups": 2,
            "downs": 0,
            "subreddit": "learnprogramming"
        },
        {
            "body": "Wow, thanks for sharing your story!\n\nHere's an interesting fact: most known programmers back in the day started out scratching their own itches, venerable projects were born that way, that's what used to be the *hacker culture* before popular culture took over it to portray hackers as kiddos stealing bank accounts. So, in a way, you are now part of that hacker culture.",
            "ups": 2,
            "downs": 0,
            "subreddit": "learnprogramming"
        },
        {
            "body": "I'm just starting the coursera python for everyone spec audit only.\n\nI've been playing with programming since i was a kid and I'm sick of customer service jobs, so I'm going to give programming a serious try.\n\nI really appreciate you making this post. I hope to see more from you in the future!",
            "ups": 2,
            "downs": 0,
            "subreddit": "learnprogramming"
        },
        {
            "body": ">After 2 weeks of building my first tool day and night (and loving every minute of it), Imposter Syndrome started to take over. I am just an Aged Care Nurse who has only been learning to code online. I don't know anything, I can't launch an Application like this.\n\nPlease, for the love of god, stop appropriating Impostor Syndrome for something that is completely different and almost unrelated.\n\nFeeling like a fraud before you have accomplished anything is shitty and as hard as it is, but that's not what Impostor Syndrome is about at all.\n\nI don't want to take away from you accomplishemnt, which is great and awesome and I highly applaud you, seriously.\n\nBut Impostor Syndrome and having slf doubts in the beginning are completely different.\n\nImpostor syndrome is about feeling like a fraud when you already have a proven track record of accomplishing things. Not when you start out. It's impssobile to have impostor syndrome without this.\n\nIt gets increasingly heard for people suffering from IS (which is a lot of people in the tech world who really suffer from it) to talk about it online, when people start mis-using this term like this\n\nPlease don't",
            "ups": 2,
            "downs": 0,
            "subreddit": "learnprogramming"
        },
        {
            "body": "This is incredible!!! This has really put a spring in my step for this morning\u2019s learning.",
            "ups": 2,
            "downs": 0,
            "subreddit": "learnprogramming"
        },
        {
            "body": "Hey,\nI have bachelor in  finance nd  I'm starting python as my first language any suggestions which courses or where should I start.\n\nNo experience in coding at all. But I'm ready to put in the effort.\n\nI read it, you're an inspiration for me.\n\nHope u would help.",
            "ups": 2,
            "downs": 0,
            "subreddit": "learnprogramming"
        },
        {
            "body": "The fact that you as a nurse even did this or started this is mind boggling- congratulations that\u2019s impressive. Most nurses I\u2019ve met stayed away from anything programming. Impressive",
            "ups": 2,
            "downs": 0,
            "subreddit": "learnprogramming"
        },
        {
            "body": "IMPOSTER??? SUS SUS AMONG US SUS IMPOSTER KEANU 100 SUS AMONG US AMONG USSSSSSS AMONG US SUS SUS AMONG AUS S USUSAUSUSUSUUSUHSU9-QWE 8U",
            "ups": 5,
            "downs": 0,
            "subreddit": "learnprogramming"
        },
        {
            "body": "Very inspiring, keep it up!",
            "ups": 2,
            "downs": 0,
            "subreddit": "learnprogramming"
        },
        {
            "body": "Sussy Baka \u0d9e",
            "ups": 3,
            "downs": 0,
            "subreddit": "learnprogramming"
        },
        {
            "body": "I'm a junior CS major and I even i feel like an imposter at times. Your words are inspirational",
            "ups": 2,
            "downs": 0,
            "subreddit": "learnprogramming"
        },
        {
            "body": "Literally just launched my first python tool into the company today felt so nervous and red faced explaining it, spent a large portion of the day waiting for someone to come back to me saying its destroyed their pc even though that's not a thing.\n\nThank you for the post really reassuring",
            "ups": 1,
            "downs": 0,
            "subreddit": "learnprogramming"
        },
        {
            "body": "That's really nice to see.\n\nI am doubting myself a lot too, thanks for sharing and good luck in your journey",
            "ups": 1,
            "downs": 0,
            "subreddit": "learnprogramming"
        },
        {
            "body": "Nice to hear that, is your tool available online ?",
            "ups": 1,
            "downs": 0,
            "subreddit": "learnprogramming"
        },
        {
            "body": "Nothing for Los Angeles except Beverly Hills. I guess those Gucci and Bentley sales tax gets them some enhanced public services.",
            "ups": 19,
            "downs": 0,
            "subreddit": "learnprogramming"
        },
        {
            "body": "I'm a librarian and I got \"Error Oops We're unable to find a SaaS application for the SAML response received.\"   :(",
            "ups": 3,
            "downs": 0,
            "subreddit": "learnprogramming"
        },
        {
            "body": "Can't seem to find it for the New York public library (NYPL)",
            "ups": 3,
            "downs": 0,
            "subreddit": "learnprogramming"
        },
        {
            "body": "San Fran works - I lied got hit with the suspicious activity. And they haven\u2019t update their ssl certs on the site. It\u2019s throwing errors allover the place.",
            "ups": 2,
            "downs": 0,
            "subreddit": "learnprogramming"
        },
        {
            "body": "Nothing for my library unfortunately.",
            "ups": 1,
            "downs": 0,
            "subreddit": "learnprogramming"
        },
        {
            "body": "Oh my god \ud83d\ude4c\ud83d\ude4c\ud83d\ude4c thank you",
            "ups": 1,
            "downs": 0,
            "subreddit": "learnprogramming"
        },
        {
            "body": "Some good insights. I am curious to see if this list changes as you get more experience. I like where your head is in a lot of these. I particularly like your #3. As a junior stretching yourself a little is a good idea. Especially if you have a good safety net like it sounds like you do.\n\nI want to comment on #2 a little. I agree that seniority isn't everything. I also want to encourage juniors to question senior devs. I have personally been put in my place by a junior, and it was humbling, but I was so proud of them for doing it. However, do not go after your senior devs without proof. Do not go after any dev without evidence. I am willing to accept a good argument with facts. I am prepared to start a flame war without them (mostly kidding). \ud83d\ude01 Remember that when it comes to seniority versus junior, the chips often fall on the side of the battle-grizzled veteran. If the junior comes with superior weaponry in the form of data and numbers, then the veteran has to concede defeat.",
            "ups": 25,
            "downs": 0,
            "subreddit": "learnprogramming"
        },
        {
            "body": "Lists start at 1. /drama",
            "ups": 9,
            "downs": 0,
            "subreddit": "learnprogramming"
        },
        {
            "body": "2 is too generic. We don\u2019t need to test 100% of code. Private methods, for example, do not need explicit unit test if the consuming public function is tested.",
            "ups": 2,
            "downs": 0,
            "subreddit": "learnprogramming"
        },
        {
            "body": "I was exactly like you when I first stated TOP about one year ago. I liked using windows and didn't see a problem with it. But since they insisted it was better not to,  I installed ubuntu on a VM, got everything running and hated it. Then I tried WSL 2 and loved it, everything was working smoothly, I got to learn how to use bash to do everything programming related but still kept my Windows install with everything I had setup. \n\nFast forward to today, I have tried Ubuntu and Pop OS! and I run Fedora as a daily driver on my machine, absolutely love using linux and just boot into Windows when I want to game. \n\nThe point is, take it easy, try out WSL since it is pretty much the same as using a native linux terminal and learn that way, then you'll see how you feel in the future.",
            "ups": 45,
            "downs": 0,
            "subreddit": "learnprogramming"
        },
        {
            "body": "Create the VM learn a new skill, you will have an advantage over those of use who didn\u2019t have to leap through those hoops. Look at it as a challenge to embrace and progress by.",
            "ups": 59,
            "downs": 0,
            "subreddit": "learnprogramming"
        },
        {
            "body": "Others here are far more qualified, but I\u2019ll throw my 2 cents in. Honestly learning how to create virtual machines or a dual boot system can be fun and engaging, just like coding is. So I\u2019d say go for it. I\u2019m not sure how much VM exist in the web dev world, but they\u2019re pretty useful in general. Imo it\u2019s a good skill to know. \n\nSide note, you can easily create a bootable flash drive with whichever Linux distro you want to try. You can then set up a linux \u201csystem\u201d that lives on an external ssd drive.",
            "ups": 10,
            "downs": 0,
            "subreddit": "learnprogramming"
        },
        {
            "body": "> I've only really done HMTL and CSS in the past, with a little dabbling in Python and Javascript, so I don't know how much of a thing this is, but is this something I am just going to have to live with if I want to do any kind of backend web dev stuff?\n\nYeah, basically. Windows is a deeply non-standard OS for programming work of all kinds, except maybe games development in C# and C++. That's something Microsoft is aware of and they try to address the issue with tools like Ubuntu for Windows, but they have their own issues and they can't paper over the fact that 90% of backend web application servers are Linux, so you may as well develop in the same kind of environment that your production code will run on.\n\nSorry. A great deal of learning to write software is about learning how much Windows sucks ass because Microsoft has always felt like they needed to write their own kernel for some reason. (I bet we see wholesale adoption of the Linux kernel by Microsoft as the basis for Windows sometime in the next ten years, or they're going to be completely left behind as we all migrate to ARM.) If you're going to do backend dev, you're going to have to get used to Linux *eventually.*",
            "ups": 6,
            "downs": 0,
            "subreddit": "learnprogramming"
        },
        {
            "body": "I am not sure if Windows Subsystem for Linux (WSL) will give you the mileage. You can give it a go. https://docs.microsoft.com/en-us/windows/wsl/about",
            "ups": 16,
            "downs": 0,
            "subreddit": "learnprogramming"
        },
        {
            "body": "Are you using VS Code? For windows web dev I use VS Code + WSL and the live server extension for static html/css/js sites. For a running a server and db I use Docker.",
            "ups": 15,
            "downs": 0,
            "subreddit": "learnprogramming"
        },
        {
            "body": "If you have a very specific learning plan, stick to it. There is no point in making unwanted alterations, that take you away from where you want to be. Find a work around or an alternative, for which there are usually many. Learning is not finite, so opportunities to expand your skillset are always going to be available to you. I often see people who want to learn X framework but only see Y tutorials and feel pressed into changing their aspirations. Just do the research and find what suits you. Perhaps it will be a mix of a couple of other courses. \n\nIn the same vein, take this opportunity to really examine your chosen path and justify your reasons for the decisions you made when you came up with the idea of wanting to learn in a Windows environment. \n\nOften expanding skilled is always encouraged but just because it might benefit 99% of people doesn't mean the 1% need to follow suit.",
            "ups": 5,
            "downs": 0,
            "subreddit": "learnprogramming"
        },
        {
            "body": "I wouldn't assume you will necessarily be using Windows in the future (I develop on Windows, but most of the code runs on linux systems), but even if you do, much of the stuff you learn will be applicable to Windows. There will be lots of fiddly bits that are different, which is a real pain when you are learning, but the essence of it will all be the same.\n\nThe reason why they specify linux is that it's free, it's very common, and that way they don't have to support multiple different platforms and detail all the fiddly bits that are different between them. They can just say \"Install this version of linux\" and know exactly what you are dealing with.\n\nWSL or a VM should work just fine. They are not hard to set up.",
            "ups": 4,
            "downs": 0,
            "subreddit": "learnprogramming"
        },
        {
            "body": "I\u2019ll chime in too, what the heck. I have done both foundational and javascript dev courses on TOP. \n\nWhen I started out I had a vm running Linux with vscode. Tbh it stifled productivity, I found it hard to get in the mood and boot up that VM. In addition I lost a lot of perks of using your native OS (performance, multimonitor flexibility, interop with stuff you do download on native OS). I stopped doing Odin for some time due to this. \n\nEventually, I got better at programming from other sources, had reinstalled Windows and decided to try Odin again. \n\n**What had I learned this time?** You don\u2019t need to care about the Linux/Mac only support, that\u2019s **only if you need help in the discord**. \n\nI have tried wsl2 and it works for the most part, but then it doesn\u2019t and it\u2019s frustrating as all hell so I have ditched it until it gets better.\n\nToday I run on windows with Windows Terminal and Git Bash as my shell (patiently waiting for Warp to hit my inbox with Windows support). \n\n**Conclusion**. Don\u2019t let Odin worry about the system requirement on Odin. I had no trouble following any of the courses there. Use Git Bash (by downloading git), it\u2019s a bash prompt so it uses the same syntax you\u2019d find on Linux/Mac.\n\nAnd stay with TOP the courses are great!",
            "ups": 3,
            "downs": 0,
            "subreddit": "learnprogramming"
        },
        {
            "body": "The Odin Project is pretty vocal about its lack of Windows support. \n\n[https://www.theodinproject.com/paths/foundations/courses/foundations/lessons/installation-overview](https://www.theodinproject.com/paths/foundations/courses/foundations/lessons/installation-overview)\n\nThey're not the only Coding Bootcamp to turn their back on the OS. Most coding bootcamps with an open source philosophy will focus on Mac OS and Linux exclusively or at least as the primary medium. Whether it's because they're stretched thin, or for ideological reasons remains to be seen.\n\nThe good news is you can essentially do everything they're teaching via the Windows Subsystem for Linux (WSL). This will get you access to all of the Linux tools and Bash commands without weird workarounds like VMs or Git Bash.\n\nThe Odin Project doesn't support WSL either, but as long as you're comfortable navigating a terminal, you can ignore them. They've said that there might be incompatibility issues, but I've been using WSL professionally for half a decade, and their concerns are horribly overblown. \n\nIf you aren't sure about WSL, please feel free to visit /r/bashonubuntuonwindows and see if it'll be a good solution for you. \n\nIf you want to ditch The Odin Project, try to keep an eye out for coding bootcamps that support Windows. Keep in mind, some coding bootcamps will focus on Windows specific implementations (like .Net and ASP) so double-check what you're trying to learn.",
            "ups": 10,
            "downs": 0,
            "subreddit": "learnprogramming"
        },
        {
            "body": "Depends, havent done the Odinproject yet, what specific course are you on?\n\nSome features can be simulated without switching to a VM/diff OS. For example a VScode Live server can simulate a web server without having to use a LAMP VM. Git can also be run on windows just as on Linux.\n\nYou might be able to run these windows features and still get your outcome.",
            "ups": 2,
            "downs": 0,
            "subreddit": "learnprogramming"
        },
        {
            "body": "I followed TOP. I tried the VM route out at first, but with low specs it was painful. I ended up almost immediately opting for dual-boot to improve performance and at some point got rid of Windows completely. \n\nLearned with some Linux distro or other (distro hopping often) for the last 1.5 years and got really comfy with Linux. I worried a bit about what I'd do if I had to develop on Windows at some point in the future.\n\nAnyway, just landed my first job and I'm required to use Windows with WSL. It's really not scary (I think TOP gave me this idea to begin with) and so far works like a charm! \n\nTOP's main point is that *if* you decide to use Windows, they won't support you when you're stuck - not that you can't.   \nAs great as their community is, and how willing everyone is to help, it's a very, very small part of the internet and you'll find plenty help/guidance all over the show.  \n\n&#x200B;\n\nTl;dr: If you're adamant on using Windows (w/ WSL2), just do it! TOP is great and I wouldn't jump ship because of this. \n\n&#x200B;\n\nFeel free to DM me anytime if you get caught up with something",
            "ups": 2,
            "downs": 0,
            "subreddit": "learnprogramming"
        },
        {
            "body": "My 2 cents \n\ntbh unless your working at a pretty low level, all oses(i e windows linuxes, mac) are really similar. \n\nEspecially dev(especially web dev). Its more or less identical on all platforms. Deploying and using some command line tools are all  that will change. However, these you can easily transfer from one os to other. \n\nAlso almost all application built these days have servers on linux machines. And for front end all browsers on all oses are the same ( i think anyway). \n\nBut if you REALLY want to dev only on windows, you can always go through loops like wsl (wsl is luvvv)\n\nThe only time platform matters for dev is when you're creating os specific apps. you need a windows machine to create windows apps, and a mac to create mac/ios apps. But even then there are still workarounds around them. \n\nSo i say go ahead, also having linux as a skill is pretty useful. \n\nTldr: go ahead and learn. Im too lazy ( and arguably terrible at summarizing text) to write a better tldr that reflects my text.",
            "ups": 2,
            "downs": 0,
            "subreddit": "learnprogramming"
        },
        {
            "body": "I second what everybody else has said. Odin may say WSL is troublesome, but it's really not for most things.",
            "ups": 2,
            "downs": 0,
            "subreddit": "learnprogramming"
        },
        {
            "body": "Most web dev is done on Linux or Mac, which share similar tools.  Most web servers run Linux.  If you're sure you're going to be using Windows in the future, are you sure you want to be taking a web dev course?  Can you explain why you think you're going to be using Windows?  Maybe you're just taking the wrong course for your goals.",
            "ups": 3,
            "downs": 0,
            "subreddit": "learnprogramming"
        },
        {
            "body": "I just started The Odin Project too. I do not think it's a requirement. It's just a recommendation to have the skill under your belt as when it comes to deployment of your application/website, it will most likely be hosted on some Linux distro like Ubuntu/Debian. So it's there to get you familiar with the command line. Although, I could be wrong. :)",
            "ups": 1,
            "downs": 0,
            "subreddit": "learnprogramming"
        },
        {
            "body": "I remember when I faced the same problem, the good thing about TOP  it's that they give the resources to get the job done, so just follow the guides man. Also, you will need Linux(some \\*nix distribution) if you want to make your life easy when installing software, for example, Ruby on Rails which TOP uses as a back-end language",
            "ups": 1,
            "downs": 0,
            "subreddit": "learnprogramming"
        },
        {
            "body": "I'm in a similar boat lol\n\nBasically, you can definitely use windows if you want, not that big a deal, but Mac and linux are more common/popular in the field. It's 1000% worth making a VM with Ubuntu, tho, and honestly it's why I switched back to completing the a+ before continuing with my programming education lol",
            "ups": 1,
            "downs": 0,
            "subreddit": "learnprogramming"
        },
        {
            "body": "Take the plunge and go Linux, I did the same thing. It\u2019s also nice to have games and shit away from your workspace.",
            "ups": 1,
            "downs": 0,
            "subreddit": "learnprogramming"
        },
        {
            "body": "Most web servers run on Linux. If you want to work in web development, you need to get comfortable with Linux. I definitely prefer to work on a Windows device, and I have written thousands of lines of code on Windows machines. But 100% of the code I have written runs on Linux boxes.\n\n[https://www.reddit.com/r/ProgrammerHumor/comments/6cer5t/what\\_are\\_clouds\\_made\\_of/?utm\\_source=share&utm\\_medium=web2x&context=3](https://www.reddit.com/r/ProgrammerHumor/comments/6cer5t/what_are_clouds_made_of/?utm_source=share&utm_medium=web2x&context=3)",
            "ups": 1,
            "downs": 0,
            "subreddit": "learnprogramming"
        },
        {
            "body": "Basically understand this. It would suck to code backend in windows. Switch to Linux.",
            "ups": 1,
            "downs": 0,
            "subreddit": "learnprogramming"
        },
        {
            "body": ">even though I'll likely just be using Windows in the future?\n\nGotta be honest with you, it doesn't seem all that likely to me.",
            "ups": 1,
            "downs": 0,
            "subreddit": "learnprogramming"
        },
        {
            "body": "Using windows to code sucks, and most people use Linux to code, especially backend devs. Linux makes certain stuff much easier, it's terminal (bash) is muuch better and you have much more control over the OS. Also most companies I know use Linux.",
            "ups": 1,
            "downs": 0,
            "subreddit": "learnprogramming"
        },
        {
            "body": "Mac and Linux may carry a similar appearance with Terminal, and the underlying UNIX subsystem.  But, you will still end up running a VM on Mac for the many of the same reasons.  Or Docker, or some other tooling to test your environment.   At that point, the difference between Windows and Mac/Linux disappears.\n\nThe fact of the matter is, **you can do 100% of the work you do on Linux on Windows** nowadays, in regards to web development.  WSL1/WSL2 are excellent choices, and work perfectly well. \n\nLooking at the TOP cirriculum.\n \n- Git for Windows works just fine  \n- You can use Docker\n- Vagrant is also an option (requires the installation of VirtualBox)\n- WSL1/2 works perfectly fine - everything works (I've tested it)\n- There is a Vagrant image for a Ruby on Rails server\n- There is a Vagrant image for a Nodejs server\n-  Visual Studio (Code) provides toolings to cover 90% of your basic needs\n  - what may not be covered is OS specific things, like file handling, etc.  This is usually just understanding path separators, and typical filesystem layout (C:\\ vs /)\n- Windows Terminal + PowerShell is very powerful if you take the time to learn it.  I have written scripts in the latest PS version that I couldn't dream of trying to do with Bash alone.  Additionally it has access to many of VB/C# module bindings, so I have access to full-on Regex, filehandling, etc. PS is a very deep and powerful commandline shell.  That is obviously outside the scope of this post.",
            "ups": 1,
            "downs": 0,
            "subreddit": "learnprogramming"
        },
        {
            "body": "If you are doing the Javascript path, you can use WSL easily. Ruby is another story though.",
            "ups": 1,
            "downs": 0,
            "subreddit": "learnprogramming"
        },
        {
            "body": "I'm surprised by how many people are saying Linux is absolutely necessary for web development.  I'm a year and a half into my programming journey, and I've built full-stack web apps just fine in Windows.  Sure, the servers they are running on maybe Linux, but I didn't have to develop the applications in Linux.  Granted, I've just been doing freelance client work and building my own projects with small teams, maybe when I get into a large company environment the need for Linux will become apparent.    \n\n\nI can understand the frustration with having to set up a development environment for the first time, though.  Just getting set up to learn to code in Python was a daunting task for me.  I just wanted to get to learning how to code.  \n\n\nOP, if I were you, I'd try to work around the Linux thing at first and come back to it.  I don't know how TOP runs their stuff, but you can definitely learn how to program in Windows.  I know TOP uses freecodecamp for some of their curricula, and that's definitely not OS-dependant.",
            "ups": 1,
            "downs": 0,
            "subreddit": "learnprogramming"
        },
        {
            "body": "bro linux is a great skill to learn and truat me you will definitely need it in the future. So go with it",
            "ups": 1,
            "downs": 0,
            "subreddit": "learnprogramming"
        },
        {
            "body": "I've completed the Odin project and never needed to run a virtual machine. Windows OS all the way.",
            "ups": 1,
            "downs": 0,
            "subreddit": "learnprogramming"
        },
        {
            "body": "Stick with The Odin Project and make a VM for Linux and learn the OS. If your plan is to become a developer, adding one more skill to your resume can only help you. If you don\u2019t like having to learn things you may want to reconsider learning to code.",
            "ups": 1,
            "downs": 0,
            "subreddit": "learnprogramming"
        },
        {
            "body": "Imo Linux>Windows by far. You could Just install wsl though",
            "ups": 1,
            "downs": 0,
            "subreddit": "learnprogramming"
        },
        {
            "body": "Use Windows Subsystem for Linux",
            "ups": 1,
            "downs": 0,
            "subreddit": "learnprogramming"
        },
        {
            "body": "Don\u2019t go Linux. Just setup the WSL from within windows and you\u2019ll be fine.",
            "ups": -1,
            "downs": 0,
            "subreddit": "learnprogramming"
        },
        {
            "body": "It seems that you have learned something that all those programming lessons fail to mention - the problems that there are in software development.\n\nOpposite to what many think, your job is as a developer is to deliver software that behaves correctly within given timeframe.\n\nAs a side quest, you make it also easy to manage and develop further, optimized etc (insert here all those good software dev practices).\n\nA company earns money by delivering functionality.",
            "ups": 629,
            "downs": 0,
            "subreddit": "learnprogramming"
        },
        {
            "body": "Something else to learn is to not immediately call out committed code being wrong. At every point of every day someone needs to make decisions regarding time, agreed upon commitments etc.\n\nWhile it isn't beat practice, that decision can literally be \"we don't have time to test\". It's a business decision and if noone allocates time to going back and improving that.. welp, not your problem.",
            "ups": 130,
            "downs": 0,
            "subreddit": "learnprogramming"
        },
        {
            "body": "Your problem isn't related to your skills at all. It's with their perception of you as not being a team player. I've been in the line of work for 27 years and currently am a highly active frontline programmer (except I get to choose which problems I want to solve, lol), and can share a few observations with you.\n\n\n1 - You basically treated them as idiots who can't see the problems that you noticed.  Most programmers have a certain amount of ego, and it generates a few good levels of ire whenever a new team member starts to critique the exact same bugs that they've been staring at for months but haven't had time to fix due to insane scheduling constraints.  I know the code band-aids are there, I know exactly why I put them there in the first place, and yes, goddamit, I know they are piling up. Rather than point these out to me, help me address them. Make a work breakdown, create a tech debt list, put it into the backlog, and start knocking them off. The whole team will thank you.\n\n2 - Fix the bug I asked you to fix. All you had to do was fix the bug (even if a low grade problem). Do that first, then, if you were really good and finished early, be my guest and help me figure out why the code base smells.  Because I don't like it, either.  Don't repeat the mistake you made, of ignoring the team request and instead, fixating on something else that caught your attention.  The whole team feels disrespected now.\n\n3 - Understand the design intent.  If you can only see problems, and don't actually understand what connects with what (even if brokenly), it tells me that you're not at the level I need you at, currently.  You need to understand the schematics of the codebase, son. You need to understand *why* it's actually working. Then you can tell me what's problematic, and what your solution might be, and I can start to trust you. Otherwise, I've already watched the YouTube of what you're talking to me about, so in one ear and out the other, to be frank.\n\n4 - Always talk in pairings: state the problem and state the solution.  Don't state a huge problem and offer a solution that you cannot possibly do on your own (without disrupting the entire team, that is).  Show your programming skills apropos problem-breakdown, and state a *manageable* problem that has a solution that *you* can do.  This is how you make yourself employable, btw... \ud83d\ude02",
            "ups": 263,
            "downs": 0,
            "subreddit": "learnprogramming"
        },
        {
            "body": "\u201cA few weeks ago I started job X, I saw problems at every layer of the application\u201d - here\u2019s where I\u2019d stop you to reflect. \n\nDo you believe the skill gap between you and your peers to be as large as to allow you to notice these glaring, omnipresent issues in a few weeks, but they missed in possibly years? Either the fixes aren\u2019t of that magnitude, or they\u2019re not issues at all.\n\nA good rule of thumb I like to use is this: I will not criticize what I do not understand. When I notice that I don\u2019t understand something, I look to peers, not with corrections, with clarifications and questions as to understand how the current solution works.\n\nTLDR: It\u2019s extremely unlikely for someone to notice problems at every layer in 2 weeks that people in 2 months+ couldn\u2019t see.",
            "ups": 47,
            "downs": 0,
            "subreddit": "learnprogramming"
        },
        {
            "body": "While I do think the environment you're in is less than ideal, i.e. no one to guide you on your first steps and give beginning tasks, lack of tests etc, pulling this statement\n\n>I told my team that I think that the bug seems to be a symptom of a bigger problem and I\u2019m not even convinced that the data we see in the app is even correct\n\non your first task when you have little to no familiarity with the codebase is bound to piss some of the developers off.",
            "ups": 77,
            "downs": 0,
            "subreddit": "learnprogramming"
        },
        {
            "body": "Many so called 'good practices' decrease risk. Risk management is a business decision. Whether a decision on how much risk to take is good or bad depends on many things and is part art, part science.\n\nIn my opinion your responsibility as an engineer is to be aware of what increases risk (and how to lower this risk) from a engineering point of view and communicate this to whomever is responsible for deciding on how much risk to take.",
            "ups": 13,
            "downs": 0,
            "subreddit": "learnprogramming"
        },
        {
            "body": "I'm glad you reflected and decided to learn from this mistake. Such a small part of being a professional actually relates to the code. In this example, you got so wrapped up in problems that you saw, that you couldn't complete the task. This would make it harder for me to give you a time sensitive task. It is probable that this bug was the first opportunity they had to give you a task that wasn't time sensitive.\n\nThis part sucks, but in any professional environment, you are playing a game of politics. There are lots of dynamics going on. As a new developer on a team, you are earning a reputation. Currently your reputation is not the best. I suggest you start trying to earn a reputation for being a problem solver who gets things done. Once you have a better reputation, find a way to deliver your findings diplomatically. Remember that software development is a labor of love and a lot of devs see their code as an extension of themselves. Attacking their code can feel like a personal attack.\n\nFinally, what can you do to help? If there are no tests, add some with your bug fixes. If some code is broken, fix it if you touch the file. The latter one is dangerous. Do not go changing code until you are understand the original design. Make some tests proving the issue and ask one of the more friendly devs to look at your tests. They may acknowledge your findings or you may learn the reason why the code is the way it is. Do not spend time fixing anything until you have fixed the bug assigned and tested your own code. Always complete your tasks assigned first. Another idea to teach you the code base is to write tests while you have nothing else to do. Take this as a personal task. Create your own branch and start getting some tests written. Your team knows they have no tests. If you present them with some tests, it could be appreciated. If it isn't, then take the time to get any tasks assigned to you done and start evaluating if it is time to find a new place to work.",
            "ups": 11,
            "downs": 0,
            "subreddit": "learnprogramming"
        },
        {
            "body": ">  I was so blown away about other issues that I found that I simply couldn\u2019t focus on the bug\n\nThat's a huge problem.  idk if you just worded that poorly, but it sounds like you stopped working on your bug fix ticket to do some other stuff no one asked for.  Not a huge deal when you are an expert on the system and people trust your judgment, but you're new and this was literally your first assigned task.",
            "ups": 8,
            "downs": 0,
            "subreddit": "learnprogramming"
        },
        {
            "body": "Most likely, they're already aware of all the problems with the application (almost certainly more aware than you are) but don't have time to address them due to scheduling constraints. A new developer coming in and pointing out what they already know isn't helpful and usually it just feels like shit. Instead of just criticizing, take the attitude of learning and helping to slowly improving the situation (prioritizing the most important, lowest effort pieces and business tasks first) and they'll be more grateful.",
            "ups": 8,
            "downs": 0,
            "subreddit": "learnprogramming"
        },
        {
            "body": "Not proven wrong, more that you learned about scope. In this case Bug Fix = Plug a Hole, rather than the entire project needs to be rebuilt. \n\nAlso, very likely they gave you the bug fix task to see how you would handle it - what your diagnostic process would be, how you would choose to patch it, and how well it fits the desired fix. \n\nNo place is ever perfect, but I suspect you could still learn a lot here, at least about ad hoc, do whatever works app development.  However, as others have mentioned, it might be a good time to update the online coding portfolio and let the recruiters know that you are available for your next challenge. With any luck you can be working with a new team in a few months.",
            "ups": 7,
            "downs": 0,
            "subreddit": "learnprogramming"
        },
        {
            "body": ">There is not a single test in the whole app    \n\nWell, that's a fucking big red mark. You're not totally wrong - there is something wrong with the codebase",
            "ups": 6,
            "downs": 0,
            "subreddit": "learnprogramming"
        },
        {
            "body": "Not saying this is what happened here, but it\u2019s very common for junior developers to see a coding style that\u2019s different from theirs and assume that the code is crappy, instead of just different",
            "ups": 4,
            "downs": 0,
            "subreddit": "learnprogramming"
        },
        {
            "body": "But their attitude is not right.",
            "ups": 19,
            "downs": 0,
            "subreddit": "learnprogramming"
        },
        {
            "body": "Just some general advice, from someone in a different field but learning how to code. When you get some insight into operations and it all seems wrong to you, the correct response is to find someone you trust and say, \"I don't understand why this works this way, could you explain it to me?\"\n\nThere's usually a reason why things take as long as they do, are set up the way that they are, have remained the way they are until you got there.  Sometimes it's a bad one, but frequently it's a compromises they had to make on the basis of time, resources, or decisions made far above them that they don't have the ability to fight.",
            "ups": 3,
            "downs": 0,
            "subreddit": "learnprogramming"
        },
        {
            "body": "Is it this guys first job in corporate?? Like never go above and beyond. It\u2019s not like your gonna get paid more or get a promotion. Which is probably their attitude as well",
            "ups": 3,
            "downs": 0,
            "subreddit": "learnprogramming"
        },
        {
            "body": "There are multiple things I want to say.\n\n1. As a new comer to the codebase, you're essentially like a customer and you basically can find out more problems with the workflow and codebase than anyone else. Note these down.\n\n2. Once you wrote then down, don't sit idle or complain about then (yet). Find workarounds or business efficient solutions for these problems. Explain them in a doc.\n\n3. Once done, contribute by talking about the solutions with the manager or a senior engineer. Explain them about the solutions and offer to research more on the solutions if needed.\n\nEveryone is busy with the business. Complaining just doesn't do shit. Give a solution or just deal with the situation.",
            "ups": 3,
            "downs": 0,
            "subreddit": "learnprogramming"
        },
        {
            "body": "If you\u2019re looking at production code that doesn\u2019t look correct, rather than reporting it as an issue, you should find the developer responsible for it and ask them to explain why it works the way it does. Usually, it means that it is accounting for an issue that a simpler implementation would miss. Sometimes it\u2019s a work around for an older issue that is not present anymore. Occasionally, it is an actual bug.\n\nIn most large enough applications there is at least one developer who is daydreaming about a huge overhaul and refactor that would simplify things and remove the conditions you need to code around. It\u2019s pretty rare this person ever gets the chance to do so, not only because rebuilding something that already works is a poor value proposition, but because the new & idealized version is just as likely as the initial implementation to introduce unexpected side effects, without the benefit of years of debugging and maintenance and use making it robust.",
            "ups": 3,
            "downs": 0,
            "subreddit": "learnprogramming"
        },
        {
            "body": "I find it somewhat sad that every reply is chiding OP for not being a team player/not being experienced/not having tact etc. I wonder if this is a by-product of the view that as a programmer your job is to solve tickets and deliver stuff someone else asks you to, you have no sense of ownership over what you do.\n\nI have been a rookie and thought that I found big bugs mistakenly (though that seems to be not the case with OP) and every time someone senior sat down with me and went through what I found. Each time even if the bug was not real, I learnt a lot and they were happy that others cared about the project as a whole than just doing some tasks.\n\nIf you penalize people when they find potential issues and alert you out of concern, you are engendering a culture where programmers stop caring about the code.",
            "ups": 5,
            "downs": 0,
            "subreddit": "learnprogramming"
        },
        {
            "body": "Just because it's wrong doesn't mean it can't work",
            "ups": 2,
            "downs": 0,
            "subreddit": "learnprogramming"
        },
        {
            "body": "#must read\n\nReal world programming : https://www.stilldrinking.org/programming-sucks",
            "ups": 2,
            "downs": 0,
            "subreddit": "learnprogramming"
        },
        {
            "body": "Ok great.",
            "ups": 2,
            "downs": 0,
            "subreddit": "learnprogramming"
        },
        {
            "body": "Wait so they have no unit tests at all?  How is that even possible?   That is a huge red flag and something you should discuss with your manager in a one on one.  How can anyone have any confidence in the system if there's no code coverage?  I would absolutely block every PR that doesn't have test coverage there is no excuse to not have tests.  \n\nWith that being said you are right here but you especially need to be careful how you present this..  I think this is a symptom of scope creep and you have to be very careful with that. If your task is to fix a bug you should only focus on that.  If you find other things while fixing the bug you should discuss it in a retro at the end of your sprint if that is what your team does.",
            "ups": 2,
            "downs": 0,
            "subreddit": "learnprogramming"
        },
        {
            "body": "this isn't limited to juniors. one company I worked at, our sales team kept asking for a feature that we used to have, but got removed during a rewrite. for months, one of the seniors kept telling them it was impossible to add the feature with the current architecture.\n\nI thought it sounded simple and couldn't understand the response, so one day I tried to implement it. turned out, it was simple. I checked in the change, which was met with a shit storm of \"you can't do it that way\" arguments. one of the other seniors helped me clean it up and we had it done, tested, and shipped in less than a week.\n\nthe VP started asking why they were told for months it was impossible by one team, but another team had it ready for production in a week. the first guy, along with his entire team, were let go.",
            "ups": 2,
            "downs": 0,
            "subreddit": "learnprogramming"
        },
        {
            "body": "The problem is this:\n\n> there is no way of telling except if you are manually comparing the data with the data aggregated from different db tables\n\nIf this is a problem for you, then there are so many problems of this kind out there for you to worry. For example, there's no way knowing your coworkers are actual programmers, the only way to prove it is to call all their previous employers and confirm, and even then you have to further prove those \"employers\" aren't just their friends pretending. \n\nBut in all seriousness, if you added some data through the UI, see that data appearing in the database table, and see it appear in the UI as well, that's all the proof you need that the data is coming from the database.\n\nHonestly don't dig deep into something that you don't need to. Feels like you're just eager to prove yourself to your team.",
            "ups": 2,
            "downs": 0,
            "subreddit": "learnprogramming"
        },
        {
            "body": "I learned this lesson a hard way as well. This type of mistakes could land you some enemies and eventually could hurt your career.\n\nA good rule of thumb I follow now is to assume you are Jon Snow.... You know NOTHING, you are a baby just dropped out yesterday. Try to ask questions instead of pointing out the mistake.  Instead of saying \"Hey, I think line XYZ will cause memory issues\" try \"Hey, I don't quite understand the relationship between XYZ and ABC, will XYZ cause memory to grow exponentially?\"",
            "ups": 2,
            "downs": 0,
            "subreddit": "learnprogramming"
        },
        {
            "body": "No, you are not wrong.\n\nYou are facing the results of the permanent \"temporal solutions\" and not following rules for programming (patterns and good practices)\n\nThe sad part is that when you come to express your opinion about it, they'll refuse to listen because it's a \"waste of resources, money and time\". Also, the famous \"if it isn't broken, don't fix it\".\n\nThis is the compromise a developer has to do; follow good practices as much as possible within the project one is assigned.\n\nDon't settle with \"i may be wrong\". When there is something you think is wrong, say it. It's up to the management and leaders to evaluate your ideas. If they disagree, move on. \n\nAdapt to them; don't become them. Otherwise, you'll fall into mediocrity.\n\nExample: I had partners complaining about the performance a calendar had, built in webform site I alone had to mantain. I present a demo to my leaders on how if we changed it to one made in JS with JSON and AJAX, this calendar would be faster (the entire site was slow, but back then I was a junior dev and would not be able to do a site overhaul). The leaders said it was great but wasn't a priority, and should focus on other tasks. Later on, I was moved to another project.",
            "ups": 4,
            "downs": 0,
            "subreddit": "learnprogramming"
        },
        {
            "body": "I hope your code is formatted better than this wall of text, Jesus man make some paragraphs.",
            "ups": 2,
            "downs": 0,
            "subreddit": "learnprogramming"
        },
        {
            "body": ">The lesson I learned is that I should probably slow down and what seems wrong to me might not be necessarily wrong at all.\n\nIf you say this is the lesson, then I have to believe you. I wasn't there. But I wonder if the real lesson is that your coworkers just don't care about making a good application. That they just placed a band-aide on a major issue and declared it \"good enough\". Perhaps I've gotten jaded in my experience in corporations, but I've run into these attitudes before. \n\nI will always be the software engineer that strives for well-organized, well-thought-out, debuggable code. And anyone who thinks or acts otherwise is just wrong. I've seen awesome code. That code ran as awesome software that the client was overjoyed with and some even won awards. I've also seen \"good enough\" code. That code ran as an application with periodic issues, some as production issues that affected the client. In no universe have I ever seen \"good enough\" code be better than actual good code.\n\nMy point is we all have to make a decision on which side of that line we want to be on and strive to that end. \n\n>They simply ignored what i said and fixed the bug themselves.\n\nAs far as I am concerned, you work with a-holes. Reports of serious issues should not be ignored. Even in the scenario that you misunderstood something, a senior engineer should have gone over it with you to either point out why you were incorrect, or why/when they are pushing the fix out, or why it won't be fixed. Ignoring a teammate and depriving them of a chance to learn by fixing a bug for them is the exact behavior that goes against the concept of \"being a team\". \n\nThe welfare of teammates always goes above deadlines. As a great software engineer explained to me on the first software engineering job I ever had: \"we either all get there, or none of us get there\".",
            "ups": 1,
            "downs": 0,
            "subreddit": "learnprogramming"
        },
        {
            "body": "Be the change, if you want the code to look better, when adding features or fixing bugs do it future proof, respond to things that might make your code look bad in the future and fix it before it happens, readable scalable and maintainable code is easier to create rather than change, there will be a lot of code added as opposed to changed, make sure you do your part and others giving you code reviews will learn and follow",
            "ups": 1,
            "downs": 0,
            "subreddit": "learnprogramming"
        },
        {
            "body": "This happens constantly when you're new.",
            "ups": 1,
            "downs": 0,
            "subreddit": "learnprogramming"
        },
        {
            "body": "That what sometime worries me about programming. People see alternative ways to do thins and sometimes i can only see my own method. I wonder if that is something that improves with experience and time. It feels like it's a mind set you need to be in to fix bugs and I dont have that power yet.",
            "ups": 1,
            "downs": 0,
            "subreddit": "learnprogramming"
        },
        {
            "body": "Any code that doesn\u2019t have thorough tests is not meant to live on. That\u2019s just a fact. But sometime you\u2019ve got to play that game to get the job done. You\u2019re not wrong.",
            "ups": 1,
            "downs": 0,
            "subreddit": "learnprogramming"
        },
        {
            "body": "25+ years of development here. No one knows how to write documentation or comment code. OKAY! OKAY! Sorry for the blanket statement. 27 people DO know how. The rest is just you trying to dig as deep as you can to find the point where you just need to write the whole fucking thing all over again in a way that makes sense. That's what we do. And sometimes, we don't even fucking TELL anyone, because they would all lose their shit (while the code fucking works perfectly now).",
            "ups": 1,
            "downs": 0,
            "subreddit": "learnprogramming"
        },
        {
            "body": "I have discovered issues with code bases that basically make the actually functionality meaningless and incorrect (even though you get a result in the UI). a lot of people simply dont care unfortunately",
            "ups": 1,
            "downs": 0,
            "subreddit": "learnprogramming"
        },
        {
            "body": "You'll be fine with that outlook in life, in this job or anything else.",
            "ups": 1,
            "downs": 0,
            "subreddit": "learnprogramming"
        },
        {
            "body": "I agree, 2 years ago I joined a startup and when I looked into their codebase, I was amazed to see that they have written their own framework over another framework. I was confused because there was no need to do that, right?\n\nSince I was new there I just wrote it down which ever part seemed like unnecessary code to me, then talked with the CTO about what I felt about the codebase. CTO then explained all the scenarios which they had to develop and had to overcome because of some limitations of the framework.\n\nNevertheless, I learnt so many new things & really honed my skills there at that startup",
            "ups": 1,
            "downs": 0,
            "subreddit": "learnprogramming"
        },
        {
            "body": "What you are referring to here is \"tech debt\". Perhaps start a simple google sheets or some other collaborative \"sheets\" software and voluntarily log each of the issues you spot with a theme, description, and location one by one. You can ask the team collaboratively if they'd like to simply note some of the issues for future fixes as they are without urgency and without time frame.\n\nThen, if push comes to shove, you all can approach the problems together one by one but creating optimizations, or if there are less top down issues, you can have monthly tech debt hours set to optimize the code with perhaps some coffee cake, boba, or some other incentive set aside for the team.",
            "ups": 1,
            "downs": 0,
            "subreddit": "learnprogramming"
        },
        {
            "body": "Next time I would frame how you approach this issue differently. If a new person joined my team and immediately started blasting the code base and questioning whether it even works and if we can even trust any of the data I'd honestly immediately tune them out and have a bad first impression. \n\nInstead what I'd do in your shoes is document areas you think may be problems and try to schedule some 1:1 time with a team member to walk you through the functionality a bit. During that you can ask questions about how the code works. The bonus here is youre also building a relationship with a coworker that you say doesn't know you exist.",
            "ups": 1,
            "downs": 0,
            "subreddit": "learnprogramming"
        },
        {
            "body": "Wow, a big codebase without types and tests? Sounds like a recipe for a disaster... I just hope you are not working in Healthcare...",
            "ups": 1,
            "downs": 0,
            "subreddit": "learnprogramming"
        },
        {
            "body": "You are employed to support and make features for an existing application, that application makes money for the company.\n\nHaving a perfect codebase a full test coverage does not make money. \n\nNo one wants to hear your story about bigger problems in the system they want to get through their sprint we've all had a job with a bad code base, most jobs have a bad code base. \n\nIf anything you'll up skill much faster than you would on a new codebase.\n\nFix the bug without complaining, fix lots of bugs, up skill more, build some imperfect features, become senior, find a job with a Greenfield project, design your masterpiece app in a way that will make the next junior behind you complain, the circle of life is complete.\n\nTldr: senior devs and managers don't care the codebase isn't perfect, nothing ever is, the company doesn't care either, they only want it to be good enough to make money.",
            "ups": 1,
            "downs": 0,
            "subreddit": "learnprogramming"
        },
        {
            "body": "Stick to the original scope. Anything else you discover put them up as a side note. Pass to the project lead or manager. Whatever they do next is up to them.",
            "ups": 1,
            "downs": 0,
            "subreddit": "learnprogramming"
        },
        {
            "body": "Is this guy seriously doing more work then what he\u2019s paid to? Not like going above and beyond is gonna get you a raise or promotion",
            "ups": 0,
            "downs": 0,
            "subreddit": "learnprogramming"
        },
        {
            "body": "Some good insights. I am curious to see if this list changes as you get more experience. I like where your head is in a lot of these. I particularly like your #3. As a junior stretching yourself a little is a good idea. Especially if you have a good safety net like it sounds like you do.\n\nI want to comment on #2 a little. I agree that seniority isn't everything. I also want to encourage juniors to question senior devs. I have personally been put in my place by a junior, and it was humbling, but I was so proud of them for doing it. However, do not go after your senior devs without proof. Do not go after any dev without evidence. I am willing to accept a good argument with facts. I am prepared to start a flame war without them (mostly kidding). \ud83d\ude01 Remember that when it comes to seniority versus junior, the chips often fall on the side of the battle-grizzled veteran. If the junior comes with superior weaponry in the form of data and numbers, then the veteran has to concede defeat.",
            "ups": 27,
            "downs": 0,
            "subreddit": "learnprogramming"
        },
        {
            "body": "Lists start at 1. /drama",
            "ups": 8,
            "downs": 0,
            "subreddit": "learnprogramming"
        },
        {
            "body": "2 is too generic. We don\u2019t need to test 100% of code. Private methods, for example, do not need explicit unit test if the consuming public function is tested.",
            "ups": 2,
            "downs": 0,
            "subreddit": "learnprogramming"
        },
        {
            "body": "I was exactly like you when I first stated TOP about one year ago. I liked using windows and didn't see a problem with it. But since they insisted it was better not to,  I installed ubuntu on a VM, got everything running and hated it. Then I tried WSL 2 and loved it, everything was working smoothly, I got to learn how to use bash to do everything programming related but still kept my Windows install with everything I had setup. \n\nFast forward to today, I have tried Ubuntu and Pop OS! and I run Fedora as a daily driver on my machine, absolutely love using linux and just boot into Windows when I want to game. \n\nThe point is, take it easy, try out WSL since it is pretty much the same as using a native linux terminal and learn that way, then you'll see how you feel in the future.",
            "ups": 46,
            "downs": 0,
            "subreddit": "learnprogramming"
        },
        {
            "body": "Create the VM learn a new skill, you will have an advantage over those of use who didn\u2019t have to leap through those hoops. Look at it as a challenge to embrace and progress by.",
            "ups": 60,
            "downs": 0,
            "subreddit": "learnprogramming"
        },
        {
            "body": "Others here are far more qualified, but I\u2019ll throw my 2 cents in. Honestly learning how to create virtual machines or a dual boot system can be fun and engaging, just like coding is. So I\u2019d say go for it. I\u2019m not sure how much VM exist in the web dev world, but they\u2019re pretty useful in general. Imo it\u2019s a good skill to know. \n\nSide note, you can easily create a bootable flash drive with whichever Linux distro you want to try. You can then set up a linux \u201csystem\u201d that lives on an external ssd drive.",
            "ups": 10,
            "downs": 0,
            "subreddit": "learnprogramming"
        },
        {
            "body": "> I've only really done HMTL and CSS in the past, with a little dabbling in Python and Javascript, so I don't know how much of a thing this is, but is this something I am just going to have to live with if I want to do any kind of backend web dev stuff?\n\nYeah, basically. Windows is a deeply non-standard OS for programming work of all kinds, except maybe games development in C# and C++. That's something Microsoft is aware of and they try to address the issue with tools like Ubuntu for Windows, but they have their own issues and they can't paper over the fact that 90% of backend web application servers are Linux, so you may as well develop in the same kind of environment that your production code will run on.\n\nSorry. A great deal of learning to write software is about learning how much Windows sucks ass because Microsoft has always felt like they needed to write their own kernel for some reason. (I bet we see wholesale adoption of the Linux kernel by Microsoft as the basis for Windows sometime in the next ten years, or they're going to be completely left behind as we all migrate to ARM.) If you're going to do backend dev, you're going to have to get used to Linux *eventually.*",
            "ups": 7,
            "downs": 0,
            "subreddit": "learnprogramming"
        },
        {
            "body": "I am not sure if Windows Subsystem for Linux (WSL) will give you the mileage. You can give it a go. https://docs.microsoft.com/en-us/windows/wsl/about",
            "ups": 16,
            "downs": 0,
            "subreddit": "learnprogramming"
        },
        {
            "body": "Are you using VS Code? For windows web dev I use VS Code + WSL and the live server extension for static html/css/js sites. For a running a server and db I use Docker.",
            "ups": 15,
            "downs": 0,
            "subreddit": "learnprogramming"
        },
        {
            "body": "If you have a very specific learning plan, stick to it. There is no point in making unwanted alterations, that take you away from where you want to be. Find a work around or an alternative, for which there are usually many. Learning is not finite, so opportunities to expand your skillset are always going to be available to you. I often see people who want to learn X framework but only see Y tutorials and feel pressed into changing their aspirations. Just do the research and find what suits you. Perhaps it will be a mix of a couple of other courses. \n\nIn the same vein, take this opportunity to really examine your chosen path and justify your reasons for the decisions you made when you came up with the idea of wanting to learn in a Windows environment. \n\nOften expanding skilled is always encouraged but just because it might benefit 99% of people doesn't mean the 1% need to follow suit.",
            "ups": 4,
            "downs": 0,
            "subreddit": "learnprogramming"
        },
        {
            "body": "I wouldn't assume you will necessarily be using Windows in the future (I develop on Windows, but most of the code runs on linux systems), but even if you do, much of the stuff you learn will be applicable to Windows. There will be lots of fiddly bits that are different, which is a real pain when you are learning, but the essence of it will all be the same.\n\nThe reason why they specify linux is that it's free, it's very common, and that way they don't have to support multiple different platforms and detail all the fiddly bits that are different between them. They can just say \"Install this version of linux\" and know exactly what you are dealing with.\n\nWSL or a VM should work just fine. They are not hard to set up.",
            "ups": 3,
            "downs": 0,
            "subreddit": "learnprogramming"
        },
        {
            "body": "I\u2019ll chime in too, what the heck. I have done both foundational and javascript dev courses on TOP. \n\nWhen I started out I had a vm running Linux with vscode. Tbh it stifled productivity, I found it hard to get in the mood and boot up that VM. In addition I lost a lot of perks of using your native OS (performance, multimonitor flexibility, interop with stuff you do download on native OS). I stopped doing Odin for some time due to this. \n\nEventually, I got better at programming from other sources, had reinstalled Windows and decided to try Odin again. \n\n**What had I learned this time?** You don\u2019t need to care about the Linux/Mac only support, that\u2019s **only if you need help in the discord**. \n\nI have tried wsl2 and it works for the most part, but then it doesn\u2019t and it\u2019s frustrating as all hell so I have ditched it until it gets better.\n\nToday I run on windows with Windows Terminal and Git Bash as my shell (patiently waiting for Warp to hit my inbox with Windows support). \n\n**Conclusion**. Don\u2019t let Odin worry about the system requirement on Odin. I had no trouble following any of the courses there. Use Git Bash (by downloading git), it\u2019s a bash prompt so it uses the same syntax you\u2019d find on Linux/Mac.\n\nAnd stay with TOP the courses are great!",
            "ups": 3,
            "downs": 0,
            "subreddit": "learnprogramming"
        },
        {
            "body": "The Odin Project is pretty vocal about its lack of Windows support. \n\n[https://www.theodinproject.com/paths/foundations/courses/foundations/lessons/installation-overview](https://www.theodinproject.com/paths/foundations/courses/foundations/lessons/installation-overview)\n\nThey're not the only Coding Bootcamp to turn their back on the OS. Most coding bootcamps with an open source philosophy will focus on Mac OS and Linux exclusively or at least as the primary medium. Whether it's because they're stretched thin, or for ideological reasons remains to be seen.\n\nThe good news is you can essentially do everything they're teaching via the Windows Subsystem for Linux (WSL). This will get you access to all of the Linux tools and Bash commands without weird workarounds like VMs or Git Bash.\n\nThe Odin Project doesn't support WSL either, but as long as you're comfortable navigating a terminal, you can ignore them. They've said that there might be incompatibility issues, but I've been using WSL professionally for half a decade, and their concerns are horribly overblown. \n\nIf you aren't sure about WSL, please feel free to visit /r/bashonubuntuonwindows and see if it'll be a good solution for you. \n\nIf you want to ditch The Odin Project, try to keep an eye out for coding bootcamps that support Windows. Keep in mind, some coding bootcamps will focus on Windows specific implementations (like .Net and ASP) so double-check what you're trying to learn.",
            "ups": 10,
            "downs": 0,
            "subreddit": "learnprogramming"
        },
        {
            "body": "Depends, havent done the Odinproject yet, what specific course are you on?\n\nSome features can be simulated without switching to a VM/diff OS. For example a VScode Live server can simulate a web server without having to use a LAMP VM. Git can also be run on windows just as on Linux.\n\nYou might be able to run these windows features and still get your outcome.",
            "ups": 2,
            "downs": 0,
            "subreddit": "learnprogramming"
        },
        {
            "body": "I followed TOP. I tried the VM route out at first, but with low specs it was painful. I ended up almost immediately opting for dual-boot to improve performance and at some point got rid of Windows completely. \n\nLearned with some Linux distro or other (distro hopping often) for the last 1.5 years and got really comfy with Linux. I worried a bit about what I'd do if I had to develop on Windows at some point in the future.\n\nAnyway, just landed my first job and I'm required to use Windows with WSL. It's really not scary (I think TOP gave me this idea to begin with) and so far works like a charm! \n\nTOP's main point is that *if* you decide to use Windows, they won't support you when you're stuck - not that you can't.   \nAs great as their community is, and how willing everyone is to help, it's a very, very small part of the internet and you'll find plenty help/guidance all over the show.  \n\n&#x200B;\n\nTl;dr: If you're adamant on using Windows (w/ WSL2), just do it! TOP is great and I wouldn't jump ship because of this. \n\n&#x200B;\n\nFeel free to DM me anytime if you get caught up with something",
            "ups": 2,
            "downs": 0,
            "subreddit": "learnprogramming"
        },
        {
            "body": "My 2 cents \n\ntbh unless your working at a pretty low level, all oses(i e windows linuxes, mac) are really similar. \n\nEspecially dev(especially web dev). Its more or less identical on all platforms. Deploying and using some command line tools are all  that will change. However, these you can easily transfer from one os to other. \n\nAlso almost all application built these days have servers on linux machines. And for front end all browsers on all oses are the same ( i think anyway). \n\nBut if you REALLY want to dev only on windows, you can always go through loops like wsl (wsl is luvvv)\n\nThe only time platform matters for dev is when you're creating os specific apps. you need a windows machine to create windows apps, and a mac to create mac/ios apps. But even then there are still workarounds around them. \n\nSo i say go ahead, also having linux as a skill is pretty useful. \n\nTldr: go ahead and learn. Im too lazy ( and arguably terrible at summarizing text) to write a better tldr that reflects my text.",
            "ups": 4,
            "downs": 0,
            "subreddit": "learnprogramming"
        },
        {
            "body": "I second what everybody else has said. Odin may say WSL is troublesome, but it's really not for most things.",
            "ups": 2,
            "downs": 0,
            "subreddit": "learnprogramming"
        },
        {
            "body": "Most web dev is done on Linux or Mac, which share similar tools.  Most web servers run Linux.  If you're sure you're going to be using Windows in the future, are you sure you want to be taking a web dev course?  Can you explain why you think you're going to be using Windows?  Maybe you're just taking the wrong course for your goals.",
            "ups": 2,
            "downs": 0,
            "subreddit": "learnprogramming"
        },
        {
            "body": "I just started The Odin Project too. I do not think it's a requirement. It's just a recommendation to have the skill under your belt as when it comes to deployment of your application/website, it will most likely be hosted on some Linux distro like Ubuntu/Debian. So it's there to get you familiar with the command line. Although, I could be wrong. :)",
            "ups": 1,
            "downs": 0,
            "subreddit": "learnprogramming"
        },
        {
            "body": "I remember when I faced the same problem, the good thing about TOP  it's that they give the resources to get the job done, so just follow the guides man. Also, you will need Linux(some \\*nix distribution) if you want to make your life easy when installing software, for example, Ruby on Rails which TOP uses as a back-end language",
            "ups": 1,
            "downs": 0,
            "subreddit": "learnprogramming"
        },
        {
            "body": "I'm in a similar boat lol\n\nBasically, you can definitely use windows if you want, not that big a deal, but Mac and linux are more common/popular in the field. It's 1000% worth making a VM with Ubuntu, tho, and honestly it's why I switched back to completing the a+ before continuing with my programming education lol",
            "ups": 1,
            "downs": 0,
            "subreddit": "learnprogramming"
        },
        {
            "body": "Take the plunge and go Linux, I did the same thing. It\u2019s also nice to have games and shit away from your workspace.",
            "ups": 1,
            "downs": 0,
            "subreddit": "learnprogramming"
        },
        {
            "body": "Most web servers run on Linux. If you want to work in web development, you need to get comfortable with Linux. I definitely prefer to work on a Windows device, and I have written thousands of lines of code on Windows machines. But 100% of the code I have written runs on Linux boxes.\n\n[https://www.reddit.com/r/ProgrammerHumor/comments/6cer5t/what\\_are\\_clouds\\_made\\_of/?utm\\_source=share&utm\\_medium=web2x&context=3](https://www.reddit.com/r/ProgrammerHumor/comments/6cer5t/what_are_clouds_made_of/?utm_source=share&utm_medium=web2x&context=3)",
            "ups": 1,
            "downs": 0,
            "subreddit": "learnprogramming"
        },
        {
            "body": "Basically understand this. It would suck to code backend in windows. Switch to Linux.",
            "ups": 1,
            "downs": 0,
            "subreddit": "learnprogramming"
        },
        {
            "body": ">even though I'll likely just be using Windows in the future?\n\nGotta be honest with you, it doesn't seem all that likely to me.",
            "ups": 1,
            "downs": 0,
            "subreddit": "learnprogramming"
        },
        {
            "body": "Using windows to code sucks, and most people use Linux to code, especially backend devs. Linux makes certain stuff much easier, it's terminal (bash) is muuch better and you have much more control over the OS. Also most companies I know use Linux.",
            "ups": 1,
            "downs": 0,
            "subreddit": "learnprogramming"
        },
        {
            "body": "Mac and Linux may carry a similar appearance with Terminal, and the underlying UNIX subsystem.  But, you will still end up running a VM on Mac for the many of the same reasons.  Or Docker, or some other tooling to test your environment.   At that point, the difference between Windows and Mac/Linux disappears.\n\nThe fact of the matter is, **you can do 100% of the work you do on Linux on Windows** nowadays, in regards to web development.  WSL1/WSL2 are excellent choices, and work perfectly well. \n\nLooking at the TOP cirriculum.\n \n- Git for Windows works just fine  \n- You can use Docker\n- Vagrant is also an option (requires the installation of VirtualBox)\n- WSL1/2 works perfectly fine - everything works (I've tested it)\n- There is a Vagrant image for a Ruby on Rails server\n- There is a Vagrant image for a Nodejs server\n-  Visual Studio (Code) provides toolings to cover 90% of your basic needs\n  - what may not be covered is OS specific things, like file handling, etc.  This is usually just understanding path separators, and typical filesystem layout (C:\\ vs /)\n- Windows Terminal + PowerShell is very powerful if you take the time to learn it.  I have written scripts in the latest PS version that I couldn't dream of trying to do with Bash alone.  Additionally it has access to many of VB/C# module bindings, so I have access to full-on Regex, filehandling, etc. PS is a very deep and powerful commandline shell.  That is obviously outside the scope of this post.",
            "ups": 1,
            "downs": 0,
            "subreddit": "learnprogramming"
        },
        {
            "body": "If you are doing the Javascript path, you can use WSL easily. Ruby is another story though.",
            "ups": 1,
            "downs": 0,
            "subreddit": "learnprogramming"
        },
        {
            "body": "I'm surprised by how many people are saying Linux is absolutely necessary for web development.  I'm a year and a half into my programming journey, and I've built full-stack web apps just fine in Windows.  Sure, the servers they are running on maybe Linux, but I didn't have to develop the applications in Linux.  Granted, I've just been doing freelance client work and building my own projects with small teams, maybe when I get into a large company environment the need for Linux will become apparent.    \n\n\nI can understand the frustration with having to set up a development environment for the first time, though.  Just getting set up to learn to code in Python was a daunting task for me.  I just wanted to get to learning how to code.  \n\n\nOP, if I were you, I'd try to work around the Linux thing at first and come back to it.  I don't know how TOP runs their stuff, but you can definitely learn how to program in Windows.  I know TOP uses freecodecamp for some of their curricula, and that's definitely not OS-dependant.",
            "ups": 1,
            "downs": 0,
            "subreddit": "learnprogramming"
        },
        {
            "body": "bro linux is a great skill to learn and truat me you will definitely need it in the future. So go with it",
            "ups": 1,
            "downs": 0,
            "subreddit": "learnprogramming"
        },
        {
            "body": "I've completed the Odin project and never needed to run a virtual machine. Windows OS all the way.",
            "ups": 1,
            "downs": 0,
            "subreddit": "learnprogramming"
        },
        {
            "body": "Stick with The Odin Project and make a VM for Linux and learn the OS. If your plan is to become a developer, adding one more skill to your resume can only help you. If you don\u2019t like having to learn things you may want to reconsider learning to code.",
            "ups": 1,
            "downs": 0,
            "subreddit": "learnprogramming"
        },
        {
            "body": "Imo Linux>Windows by far. You could Just install wsl though",
            "ups": 1,
            "downs": 0,
            "subreddit": "learnprogramming"
        },
        {
            "body": "Use Windows Subsystem for Linux",
            "ups": 1,
            "downs": 0,
            "subreddit": "learnprogramming"
        },
        {
            "body": "Don\u2019t go Linux. Just setup the WSL from within windows and you\u2019ll be fine.",
            "ups": -1,
            "downs": 0,
            "subreddit": "learnprogramming"
        },
        {
            "body": "It seems that you have learned something that all those programming lessons fail to mention - the problems that there are in software development.\n\nOpposite to what many think, your job is as a developer is to deliver software that behaves correctly within given timeframe.\n\nAs a side quest, you make it also easy to manage and develop further, optimized etc (insert here all those good software dev practices).\n\nA company earns money by delivering functionality.",
            "ups": 636,
            "downs": 0,
            "subreddit": "learnprogramming"
        },
        {
            "body": "Something else to learn is to not immediately call out committed code being wrong. At every point of every day someone needs to make decisions regarding time, agreed upon commitments etc.\n\nWhile it isn't beat practice, that decision can literally be \"we don't have time to test\". It's a business decision and if noone allocates time to going back and improving that.. welp, not your problem.",
            "ups": 130,
            "downs": 0,
            "subreddit": "learnprogramming"
        },
        {
            "body": "Your problem isn't related to your skills at all. It's with their perception of you as not being a team player. I've been in the line of work for 27 years and currently am a highly active frontline programmer (except I get to choose which problems I want to solve, lol), and can share a few observations with you.\n\n\n1 - You basically treated them as idiots who can't see the problems that you noticed.  Most programmers have a certain amount of ego, and it generates a few good levels of ire whenever a new team member starts to critique the exact same bugs that they've been staring at for months but haven't had time to fix due to insane scheduling constraints.  I know the code band-aids are there, I know exactly why I put them there in the first place, and yes, goddamit, I know they are piling up. Rather than point these out to me, help me address them. Make a work breakdown, create a tech debt list, put it into the backlog, and start knocking them off. The whole team will thank you.\n\n2 - Fix the bug I asked you to fix. All you had to do was fix the bug (even if a low grade problem). Do that first, then, if you were really good and finished early, be my guest and help me figure out why the code base smells.  Because I don't like it, either.  Don't repeat the mistake you made, of ignoring the team request and instead, fixating on something else that caught your attention.  The whole team feels disrespected now.\n\n3 - Understand the design intent.  If you can only see problems, and don't actually understand what connects with what (even if brokenly), it tells me that you're not at the level I need you at, currently.  You need to understand the schematics of the codebase, son. You need to understand *why* it's actually working. Then you can tell me what's problematic, and what your solution might be, and I can start to trust you. Otherwise, I've already watched the YouTube of what you're talking to me about, so in one ear and out the other, to be frank.\n\n4 - Always talk in pairings: state the problem and state the solution.  Don't state a huge problem and offer a solution that you cannot possibly do on your own (without disrupting the entire team, that is).  Show your programming skills apropos problem-breakdown, and state a *manageable* problem that has a solution that *you* can do.  This is how you make yourself employable, btw... \ud83d\ude02",
            "ups": 257,
            "downs": 0,
            "subreddit": "learnprogramming"
        },
        {
            "body": "\u201cA few weeks ago I started job X, I saw problems at every layer of the application\u201d - here\u2019s where I\u2019d stop you to reflect. \n\nDo you believe the skill gap between you and your peers to be as large as to allow you to notice these glaring, omnipresent issues in a few weeks, but they missed in possibly years? Either the fixes aren\u2019t of that magnitude, or they\u2019re not issues at all.\n\nA good rule of thumb I like to use is this: I will not criticize what I do not understand. When I notice that I don\u2019t understand something, I look to peers, not with corrections, with clarifications and questions as to understand how the current solution works.\n\nTLDR: It\u2019s extremely unlikely for someone to notice problems at every layer in 2 weeks that people in 2 months+ couldn\u2019t see.",
            "ups": 47,
            "downs": 0,
            "subreddit": "learnprogramming"
        },
        {
            "body": "While I do think the environment you're in is less than ideal, i.e. no one to guide you on your first steps and give beginning tasks, lack of tests etc, pulling this statement\n\n>I told my team that I think that the bug seems to be a symptom of a bigger problem and I\u2019m not even convinced that the data we see in the app is even correct\n\non your first task when you have little to no familiarity with the codebase is bound to piss some of the developers off.",
            "ups": 76,
            "downs": 0,
            "subreddit": "learnprogramming"
        },
        {
            "body": "Many so called 'good practices' decrease risk. Risk management is a business decision. Whether a decision on how much risk to take is good or bad depends on many things and is part art, part science.\n\nIn my opinion your responsibility as an engineer is to be aware of what increases risk (and how to lower this risk) from a engineering point of view and communicate this to whomever is responsible for deciding on how much risk to take.",
            "ups": 13,
            "downs": 0,
            "subreddit": "learnprogramming"
        },
        {
            "body": "I'm glad you reflected and decided to learn from this mistake. Such a small part of being a professional actually relates to the code. In this example, you got so wrapped up in problems that you saw, that you couldn't complete the task. This would make it harder for me to give you a time sensitive task. It is probable that this bug was the first opportunity they had to give you a task that wasn't time sensitive.\n\nThis part sucks, but in any professional environment, you are playing a game of politics. There are lots of dynamics going on. As a new developer on a team, you are earning a reputation. Currently your reputation is not the best. I suggest you start trying to earn a reputation for being a problem solver who gets things done. Once you have a better reputation, find a way to deliver your findings diplomatically. Remember that software development is a labor of love and a lot of devs see their code as an extension of themselves. Attacking their code can feel like a personal attack.\n\nFinally, what can you do to help? If there are no tests, add some with your bug fixes. If some code is broken, fix it if you touch the file. The latter one is dangerous. Do not go changing code until you are understand the original design. Make some tests proving the issue and ask one of the more friendly devs to look at your tests. They may acknowledge your findings or you may learn the reason why the code is the way it is. Do not spend time fixing anything until you have fixed the bug assigned and tested your own code. Always complete your tasks assigned first. Another idea to teach you the code base is to write tests while you have nothing else to do. Take this as a personal task. Create your own branch and start getting some tests written. Your team knows they have no tests. If you present them with some tests, it could be appreciated. If it isn't, then take the time to get any tasks assigned to you done and start evaluating if it is time to find a new place to work.",
            "ups": 10,
            "downs": 0,
            "subreddit": "learnprogramming"
        },
        {
            "body": ">  I was so blown away about other issues that I found that I simply couldn\u2019t focus on the bug\n\nThat's a huge problem.  idk if you just worded that poorly, but it sounds like you stopped working on your bug fix ticket to do some other stuff no one asked for.  Not a huge deal when you are an expert on the system and people trust your judgment, but you're new and this was literally your first assigned task.",
            "ups": 8,
            "downs": 0,
            "subreddit": "learnprogramming"
        },
        {
            "body": "Most likely, they're already aware of all the problems with the application (almost certainly more aware than you are) but don't have time to address them due to scheduling constraints. A new developer coming in and pointing out what they already know isn't helpful and usually it just feels like shit. Instead of just criticizing, take the attitude of learning and helping to slowly improving the situation (prioritizing the most important, lowest effort pieces and business tasks first) and they'll be more grateful.",
            "ups": 6,
            "downs": 0,
            "subreddit": "learnprogramming"
        },
        {
            "body": "Not proven wrong, more that you learned about scope. In this case Bug Fix = Plug a Hole, rather than the entire project needs to be rebuilt. \n\nAlso, very likely they gave you the bug fix task to see how you would handle it - what your diagnostic process would be, how you would choose to patch it, and how well it fits the desired fix. \n\nNo place is ever perfect, but I suspect you could still learn a lot here, at least about ad hoc, do whatever works app development.  However, as others have mentioned, it might be a good time to update the online coding portfolio and let the recruiters know that you are available for your next challenge. With any luck you can be working with a new team in a few months.",
            "ups": 6,
            "downs": 0,
            "subreddit": "learnprogramming"
        },
        {
            "body": ">There is not a single test in the whole app    \n\nWell, that's a fucking big red mark. You're not totally wrong - there is something wrong with the codebase",
            "ups": 6,
            "downs": 0,
            "subreddit": "learnprogramming"
        },
        {
            "body": "Not saying this is what happened here, but it\u2019s very common for junior developers to see a coding style that\u2019s different from theirs and assume that the code is crappy, instead of just different",
            "ups": 5,
            "downs": 0,
            "subreddit": "learnprogramming"
        },
        {
            "body": "But their attitude is not right.",
            "ups": 19,
            "downs": 0,
            "subreddit": "learnprogramming"
        },
        {
            "body": "Just some general advice, from someone in a different field but learning how to code. When you get some insight into operations and it all seems wrong to you, the correct response is to find someone you trust and say, \"I don't understand why this works this way, could you explain it to me?\"\n\nThere's usually a reason why things take as long as they do, are set up the way that they are, have remained the way they are until you got there.  Sometimes it's a bad one, but frequently it's a compromises they had to make on the basis of time, resources, or decisions made far above them that they don't have the ability to fight.",
            "ups": 3,
            "downs": 0,
            "subreddit": "learnprogramming"
        },
        {
            "body": "Is it this guys first job in corporate?? Like never go above and beyond. It\u2019s not like your gonna get paid more or get a promotion. Which is probably their attitude as well",
            "ups": 3,
            "downs": 0,
            "subreddit": "learnprogramming"
        },
        {
            "body": "There are multiple things I want to say.\n\n1. As a new comer to the codebase, you're essentially like a customer and you basically can find out more problems with the workflow and codebase than anyone else. Note these down.\n\n2. Once you wrote then down, don't sit idle or complain about then (yet). Find workarounds or business efficient solutions for these problems. Explain them in a doc.\n\n3. Once done, contribute by talking about the solutions with the manager or a senior engineer. Explain them about the solutions and offer to research more on the solutions if needed.\n\nEveryone is busy with the business. Complaining just doesn't do shit. Give a solution or just deal with the situation.",
            "ups": 3,
            "downs": 0,
            "subreddit": "learnprogramming"
        },
        {
            "body": "If you\u2019re looking at production code that doesn\u2019t look correct, rather than reporting it as an issue, you should find the developer responsible for it and ask them to explain why it works the way it does. Usually, it means that it is accounting for an issue that a simpler implementation would miss. Sometimes it\u2019s a work around for an older issue that is not present anymore. Occasionally, it is an actual bug.\n\nIn most large enough applications there is at least one developer who is daydreaming about a huge overhaul and refactor that would simplify things and remove the conditions you need to code around. It\u2019s pretty rare this person ever gets the chance to do so, not only because rebuilding something that already works is a poor value proposition, but because the new & idealized version is just as likely as the initial implementation to introduce unexpected side effects, without the benefit of years of debugging and maintenance and use making it robust.",
            "ups": 3,
            "downs": 0,
            "subreddit": "learnprogramming"
        },
        {
            "body": "I find it somewhat sad that every reply is chiding OP for not being a team player/not being experienced/not having tact etc. I wonder if this is a by-product of the view that as a programmer your job is to solve tickets and deliver stuff someone else asks you to, you have no sense of ownership over what you do.\n\nI have been a rookie and thought that I found big bugs mistakenly (though that seems to be not the case with OP) and every time someone senior sat down with me and went through what I found. Each time even if the bug was not real, I learnt a lot and they were happy that others cared about the project as a whole than just doing some tasks.\n\nIf you penalize people when they find potential issues and alert you out of concern, you are engendering a culture where programmers stop caring about the code.",
            "ups": 7,
            "downs": 0,
            "subreddit": "learnprogramming"
        },
        {
            "body": "Just because it's wrong doesn't mean it can't work",
            "ups": 2,
            "downs": 0,
            "subreddit": "learnprogramming"
        },
        {
            "body": "#must read\n\nReal world programming : https://www.stilldrinking.org/programming-sucks",
            "ups": 2,
            "downs": 0,
            "subreddit": "learnprogramming"
        },
        {
            "body": "Ok great.",
            "ups": 2,
            "downs": 0,
            "subreddit": "learnprogramming"
        },
        {
            "body": "Wait so they have no unit tests at all?  How is that even possible?   That is a huge red flag and something you should discuss with your manager in a one on one.  How can anyone have any confidence in the system if there's no code coverage?  I would absolutely block every PR that doesn't have test coverage there is no excuse to not have tests.  \n\nWith that being said you are right here but you especially need to be careful how you present this..  I think this is a symptom of scope creep and you have to be very careful with that. If your task is to fix a bug you should only focus on that.  If you find other things while fixing the bug you should discuss it in a retro at the end of your sprint if that is what your team does.",
            "ups": 2,
            "downs": 0,
            "subreddit": "learnprogramming"
        },
        {
            "body": "this isn't limited to juniors. one company I worked at, our sales team kept asking for a feature that we used to have, but got removed during a rewrite. for months, one of the seniors kept telling them it was impossible to add the feature with the current architecture.\n\nI thought it sounded simple and couldn't understand the response, so one day I tried to implement it. turned out, it was simple. I checked in the change, which was met with a shit storm of \"you can't do it that way\" arguments. one of the other seniors helped me clean it up and we had it done, tested, and shipped in less than a week.\n\nthe VP started asking why they were told for months it was impossible by one team, but another team had it ready for production in a week. the first guy, along with his entire team, were let go.",
            "ups": 2,
            "downs": 0,
            "subreddit": "learnprogramming"
        },
        {
            "body": "The problem is this:\n\n> there is no way of telling except if you are manually comparing the data with the data aggregated from different db tables\n\nIf this is a problem for you, then there are so many problems of this kind out there for you to worry. For example, there's no way knowing your coworkers are actual programmers, the only way to prove it is to call all their previous employers and confirm, and even then you have to further prove those \"employers\" aren't just their friends pretending. \n\nBut in all seriousness, if you added some data through the UI, see that data appearing in the database table, and see it appear in the UI as well, that's all the proof you need that the data is coming from the database.\n\nHonestly don't dig deep into something that you don't need to. Feels like you're just eager to prove yourself to your team.",
            "ups": 2,
            "downs": 0,
            "subreddit": "learnprogramming"
        },
        {
            "body": "I learned this lesson a hard way as well. This type of mistakes could land you some enemies and eventually could hurt your career.\n\nA good rule of thumb I follow now is to assume you are Jon Snow.... You know NOTHING, you are a baby just dropped out yesterday. Try to ask questions instead of pointing out the mistake.  Instead of saying \"Hey, I think line XYZ will cause memory issues\" try \"Hey, I don't quite understand the relationship between XYZ and ABC, will XYZ cause memory to grow exponentially?\"",
            "ups": 2,
            "downs": 0,
            "subreddit": "learnprogramming"
        },
        {
            "body": "No, you are not wrong.\n\nYou are facing the results of the permanent \"temporal solutions\" and not following rules for programming (patterns and good practices)\n\nThe sad part is that when you come to express your opinion about it, they'll refuse to listen because it's a \"waste of resources, money and time\". Also, the famous \"if it isn't broken, don't fix it\".\n\nThis is the compromise a developer has to do; follow good practices as much as possible within the project one is assigned.\n\nDon't settle with \"i may be wrong\". When there is something you think is wrong, say it. It's up to the management and leaders to evaluate your ideas. If they disagree, move on. \n\nAdapt to them; don't become them. Otherwise, you'll fall into mediocrity.\n\nExample: I had partners complaining about the performance a calendar had, built in webform site I alone had to mantain. I present a demo to my leaders on how if we changed it to one made in JS with JSON and AJAX, this calendar would be faster (the entire site was slow, but back then I was a junior dev and would not be able to do a site overhaul). The leaders said it was great but wasn't a priority, and should focus on other tasks. Later on, I was moved to another project.",
            "ups": 3,
            "downs": 0,
            "subreddit": "learnprogramming"
        },
        {
            "body": "I hope your code is formatted better than this wall of text, Jesus man make some paragraphs.",
            "ups": 2,
            "downs": 0,
            "subreddit": "learnprogramming"
        },
        {
            "body": ">The lesson I learned is that I should probably slow down and what seems wrong to me might not be necessarily wrong at all.\n\nIf you say this is the lesson, then I have to believe you. I wasn't there. But I wonder if the real lesson is that your coworkers just don't care about making a good application. That they just placed a band-aide on a major issue and declared it \"good enough\". Perhaps I've gotten jaded in my experience in corporations, but I've run into these attitudes before. \n\nI will always be the software engineer that strives for well-organized, well-thought-out, debuggable code. And anyone who thinks or acts otherwise is just wrong. I've seen awesome code. That code ran as awesome software that the client was overjoyed with and some even won awards. I've also seen \"good enough\" code. That code ran as an application with periodic issues, some as production issues that affected the client. In no universe have I ever seen \"good enough\" code be better than actual good code.\n\nMy point is we all have to make a decision on which side of that line we want to be on and strive to that end. \n\n>They simply ignored what i said and fixed the bug themselves.\n\nAs far as I am concerned, you work with a-holes. Reports of serious issues should not be ignored. Even in the scenario that you misunderstood something, a senior engineer should have gone over it with you to either point out why you were incorrect, or why/when they are pushing the fix out, or why it won't be fixed. Ignoring a teammate and depriving them of a chance to learn by fixing a bug for them is the exact behavior that goes against the concept of \"being a team\". \n\nThe welfare of teammates always goes above deadlines. As a great software engineer explained to me on the first software engineering job I ever had: \"we either all get there, or none of us get there\".",
            "ups": 1,
            "downs": 0,
            "subreddit": "learnprogramming"
        },
        {
            "body": "Be the change, if you want the code to look better, when adding features or fixing bugs do it future proof, respond to things that might make your code look bad in the future and fix it before it happens, readable scalable and maintainable code is easier to create rather than change, there will be a lot of code added as opposed to changed, make sure you do your part and others giving you code reviews will learn and follow",
            "ups": 1,
            "downs": 0,
            "subreddit": "learnprogramming"
        },
        {
            "body": "This happens constantly when you're new.",
            "ups": 1,
            "downs": 0,
            "subreddit": "learnprogramming"
        },
        {
            "body": "That what sometime worries me about programming. People see alternative ways to do thins and sometimes i can only see my own method. I wonder if that is something that improves with experience and time. It feels like it's a mind set you need to be in to fix bugs and I dont have that power yet.",
            "ups": 1,
            "downs": 0,
            "subreddit": "learnprogramming"
        },
        {
            "body": "Any code that doesn\u2019t have thorough tests is not meant to live on. That\u2019s just a fact. But sometime you\u2019ve got to play that game to get the job done. You\u2019re not wrong.",
            "ups": 1,
            "downs": 0,
            "subreddit": "learnprogramming"
        },
        {
            "body": "25+ years of development here. No one knows how to write documentation or comment code. OKAY! OKAY! Sorry for the blanket statement. 27 people DO know how. The rest is just you trying to dig as deep as you can to find the point where you just need to write the whole fucking thing all over again in a way that makes sense. That's what we do. And sometimes, we don't even fucking TELL anyone, because they would all lose their shit (while the code fucking works perfectly now).",
            "ups": 1,
            "downs": 0,
            "subreddit": "learnprogramming"
        },
        {
            "body": "I have discovered issues with code bases that basically make the actually functionality meaningless and incorrect (even though you get a result in the UI). a lot of people simply dont care unfortunately",
            "ups": 1,
            "downs": 0,
            "subreddit": "learnprogramming"
        },
        {
            "body": "You'll be fine with that outlook in life, in this job or anything else.",
            "ups": 1,
            "downs": 0,
            "subreddit": "learnprogramming"
        },
        {
            "body": "I agree, 2 years ago I joined a startup and when I looked into their codebase, I was amazed to see that they have written their own framework over another framework. I was confused because there was no need to do that, right?\n\nSince I was new there I just wrote it down which ever part seemed like unnecessary code to me, then talked with the CTO about what I felt about the codebase. CTO then explained all the scenarios which they had to develop and had to overcome because of some limitations of the framework.\n\nNevertheless, I learnt so many new things & really honed my skills there at that startup",
            "ups": 1,
            "downs": 0,
            "subreddit": "learnprogramming"
        },
        {
            "body": "What you are referring to here is \"tech debt\". Perhaps start a simple google sheets or some other collaborative \"sheets\" software and voluntarily log each of the issues you spot with a theme, description, and location one by one. You can ask the team collaboratively if they'd like to simply note some of the issues for future fixes as they are without urgency and without time frame.\n\nThen, if push comes to shove, you all can approach the problems together one by one but creating optimizations, or if there are less top down issues, you can have monthly tech debt hours set to optimize the code with perhaps some coffee cake, boba, or some other incentive set aside for the team.",
            "ups": 1,
            "downs": 0,
            "subreddit": "learnprogramming"
        },
        {
            "body": "Next time I would frame how you approach this issue differently. If a new person joined my team and immediately started blasting the code base and questioning whether it even works and if we can even trust any of the data I'd honestly immediately tune them out and have a bad first impression. \n\nInstead what I'd do in your shoes is document areas you think may be problems and try to schedule some 1:1 time with a team member to walk you through the functionality a bit. During that you can ask questions about how the code works. The bonus here is youre also building a relationship with a coworker that you say doesn't know you exist.",
            "ups": 1,
            "downs": 0,
            "subreddit": "learnprogramming"
        },
        {
            "body": "Wow, a big codebase without types and tests? Sounds like a recipe for a disaster... I just hope you are not working in Healthcare...",
            "ups": 1,
            "downs": 0,
            "subreddit": "learnprogramming"
        },
        {
            "body": "You are employed to support and make features for an existing application, that application makes money for the company.\n\nHaving a perfect codebase a full test coverage does not make money. \n\nNo one wants to hear your story about bigger problems in the system they want to get through their sprint we've all had a job with a bad code base, most jobs have a bad code base. \n\nIf anything you'll up skill much faster than you would on a new codebase.\n\nFix the bug without complaining, fix lots of bugs, up skill more, build some imperfect features, become senior, find a job with a Greenfield project, design your masterpiece app in a way that will make the next junior behind you complain, the circle of life is complete.\n\nTldr: senior devs and managers don't care the codebase isn't perfect, nothing ever is, the company doesn't care either, they only want it to be good enough to make money.",
            "ups": 1,
            "downs": 0,
            "subreddit": "learnprogramming"
        },
        {
            "body": "Stick to the original scope. Anything else you discover put them up as a side note. Pass to the project lead or manager. Whatever they do next is up to them.",
            "ups": 1,
            "downs": 0,
            "subreddit": "learnprogramming"
        },
        {
            "body": "Is this guy seriously doing more work then what he\u2019s paid to? Not like going above and beyond is gonna get you a raise or promotion",
            "ups": 0,
            "downs": 0,
            "subreddit": "learnprogramming"
        }
    ]
}